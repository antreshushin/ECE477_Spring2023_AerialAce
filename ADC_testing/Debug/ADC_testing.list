
ADC_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004298  08004298  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08004298  08004298  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004298  08004298  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004298  08004298  00014298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080042a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          000000b8  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e158  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001750  00000000  00000000  0002e1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002f908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b20  00000000  00000000  000304e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001830  00000000  00000000  00031000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c061  00000000  00000000  00032830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b41bb  00000000  00000000  0003e891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f2a4c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032a4  00000000  00000000  000f2a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004250 	.word	0x08004250

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08004250 	.word	0x08004250

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <lsm9ds1_read_reg>:
  *
  */
int32_t __weak lsm9ds1_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	460b      	mov	r3, r1
 8000a12:	72fb      	strb	r3, [r7, #11]
 8000a14:	4613      	mov	r3, r2
 8000a16:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	685c      	ldr	r4, [r3, #4]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	68d8      	ldr	r0, [r3, #12]
 8000a20:	893b      	ldrh	r3, [r7, #8]
 8000a22:	7af9      	ldrb	r1, [r7, #11]
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	47a0      	blx	r4
 8000a28:	6178      	str	r0, [r7, #20]

  return ret;
 8000a2a:	697b      	ldr	r3, [r7, #20]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	371c      	adds	r7, #28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd90      	pop	{r4, r7, pc}

08000a34 <lsm9ds1_write_reg>:
  *
  */
int32_t __weak lsm9ds1_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b087      	sub	sp, #28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	460b      	mov	r3, r1
 8000a42:	72fb      	strb	r3, [r7, #11]
 8000a44:	4613      	mov	r3, r2
 8000a46:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681c      	ldr	r4, [r3, #0]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	68d8      	ldr	r0, [r3, #12]
 8000a50:	893b      	ldrh	r3, [r7, #8]
 8000a52:	7af9      	ldrb	r1, [r7, #11]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	47a0      	blx	r4
 8000a58:	6178      	str	r0, [r7, #20]

  return ret;
 8000a5a:	697b      	ldr	r3, [r7, #20]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	371c      	adds	r7, #28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd90      	pop	{r4, r7, pc}

08000a64 <lsm9ds1_from_fs4g_to_mg>:
{
  return ((float_t)lsb * 0.061f);
}

float_t lsm9ds1_from_fs4g_to_mg(int16_t lsb)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.122f);
 8000a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a72:	ee07 3a90 	vmov	s15, r3
 8000a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a7a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a90 <lsm9ds1_from_fs4g_to_mg+0x2c>
 8000a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000a82:	eeb0 0a67 	vmov.f32	s0, s15
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	3df9db23 	.word	0x3df9db23

08000a94 <lsm9ds1_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 17.50f);
}

float_t lsm9ds1_from_fs2000dps_to_mdps(int16_t lsb)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8000a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa2:	ee07 3a90 	vmov	s15, r3
 8000aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aaa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000ac0 <lsm9ds1_from_fs2000dps_to_mdps+0x2c>
 8000aae:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	428c0000 	.word	0x428c0000

08000ac4 <lsm9ds1_from_fs16gauss_to_mG>:
{
  return ((float_t)lsb * 0.43f);
}

float_t lsm9ds1_from_fs16gauss_to_mG(int16_t lsb)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.58f);
 8000ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad2:	ee07 3a90 	vmov	s15, r3
 8000ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ada:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000af0 <lsm9ds1_from_fs16gauss_to_mG+0x2c>
 8000ade:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	3f147ae1 	.word	0x3f147ae1

08000af4 <lsm9ds1_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_gy_fs_t val)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8000b00:	f107 0208 	add.w	r2, r7, #8
 8000b04:	2301      	movs	r3, #1
 8000b06:	2110      	movs	r1, #16
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff7b 	bl	8000a04 <lsm9ds1_read_reg>
 8000b0e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10f      	bne.n	8000b36 <lsm9ds1_gy_full_scale_set+0x42>
  {
    ctrl_reg1_g.fs_g = (uint8_t)val;
 8000b16:	78fb      	ldrb	r3, [r7, #3]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	7a3b      	ldrb	r3, [r7, #8]
 8000b20:	f362 03c4 	bfi	r3, r2, #3, #2
 8000b24:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8000b26:	f107 0208 	add.w	r2, r7, #8
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	2110      	movs	r1, #16
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ff80 	bl	8000a34 <lsm9ds1_write_reg>
 8000b34:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <lsm9ds1_imu_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_imu_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_imu_odr_t val)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8000b4c:	f107 0210 	add.w	r2, r7, #16
 8000b50:	2301      	movs	r3, #1
 8000b52:	2110      	movs	r1, #16
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff55 	bl	8000a04 <lsm9ds1_read_reg>
 8000b5a:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10f      	bne.n	8000b82 <lsm9ds1_imu_data_rate_set+0x42>
  {
    ctrl_reg1_g.odr_g = (uint8_t)val & 0x07U;
 8000b62:	78fb      	ldrb	r3, [r7, #3]
 8000b64:	f003 0307 	and.w	r3, r3, #7
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	7c3b      	ldrb	r3, [r7, #16]
 8000b6c:	f362 1347 	bfi	r3, r2, #5, #3
 8000b70:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8000b72:	f107 0210 	add.w	r2, r7, #16
 8000b76:	2301      	movs	r3, #1
 8000b78:	2110      	movs	r1, #16
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ff5a 	bl	8000a34 <lsm9ds1_write_reg>
 8000b80:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  if (ret == 0)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d107      	bne.n	8000b98 <lsm9ds1_imu_data_rate_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8000b88:	f107 020c 	add.w	r2, r7, #12
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	2120      	movs	r1, #32
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff37 	bl	8000a04 <lsm9ds1_read_reg>
 8000b96:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d110      	bne.n	8000bc0 <lsm9ds1_imu_data_rate_set+0x80>
  {
    ctrl_reg6_xl.odr_xl = (((uint8_t)val & 0x70U) >> 4);
 8000b9e:	78fb      	ldrb	r3, [r7, #3]
 8000ba0:	091b      	lsrs	r3, r3, #4
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	7b3b      	ldrb	r3, [r7, #12]
 8000baa:	f362 1347 	bfi	r3, r2, #5, #3
 8000bae:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8000bb0:	f107 020c 	add.w	r2, r7, #12
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff3b 	bl	8000a34 <lsm9ds1_write_reg>
 8000bbe:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d107      	bne.n	8000bd6 <lsm9ds1_imu_data_rate_set+0x96>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8000bc6:	f107 0208 	add.w	r2, r7, #8
 8000bca:	2301      	movs	r3, #1
 8000bcc:	2112      	movs	r1, #18
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ff18 	bl	8000a04 <lsm9ds1_read_reg>
 8000bd4:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d111      	bne.n	8000c00 <lsm9ds1_imu_data_rate_set+0xc0>
  {
    ctrl_reg3_g.lp_mode = (((uint8_t)val & 0x80U) >> 7);
 8000bdc:	78fb      	ldrb	r3, [r7, #3]
 8000bde:	09db      	lsrs	r3, r3, #7
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	7a3b      	ldrb	r3, [r7, #8]
 8000bea:	f362 13c7 	bfi	r3, r2, #7, #1
 8000bee:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8000bf0:	f107 0208 	add.w	r2, r7, #8
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	2112      	movs	r1, #18
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff1b 	bl	8000a34 <lsm9ds1_write_reg>
 8000bfe:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8000c00:	697b      	ldr	r3, [r7, #20]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <lsm9ds1_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_xl_fs_t val)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8000c16:	f107 0208 	add.w	r2, r7, #8
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fef0 	bl	8000a04 <lsm9ds1_read_reg>
 8000c24:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d10f      	bne.n	8000c4c <lsm9ds1_xl_full_scale_set+0x42>
  {
    ctrl_reg6_xl.fs_xl = (uint8_t)val;
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	7a3b      	ldrb	r3, [r7, #8]
 8000c36:	f362 03c4 	bfi	r3, r2, #3, #2
 8000c3a:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8000c3c:	f107 0208 	add.w	r2, r7, #8
 8000c40:	2301      	movs	r3, #1
 8000c42:	2120      	movs	r1, #32
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff fef5 	bl	8000a34 <lsm9ds1_write_reg>
 8000c4a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <lsm9ds1_block_data_update_set>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_block_data_update_set(stmdev_ctx_t *ctx_mag,
                                      stmdev_ctx_t *ctx_imu, uint8_t val)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b088      	sub	sp, #32
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	4613      	mov	r3, r2
 8000c62:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  lsm9ds1_ctrl_reg5_m_t ctrl_reg5_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8000c64:	f107 0218 	add.w	r2, r7, #24
 8000c68:	2301      	movs	r3, #1
 8000c6a:	2122      	movs	r1, #34	; 0x22
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f7ff fec9 	bl	8000a04 <lsm9ds1_read_reg>
 8000c72:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10f      	bne.n	8000c9a <lsm9ds1_block_data_update_set+0x44>
  {
    ctrl_reg8.bdu = (uint8_t)val;
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	7e3b      	ldrb	r3, [r7, #24]
 8000c84:	f362 1386 	bfi	r3, r2, #6, #1
 8000c88:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8000c8a:	f107 0218 	add.w	r2, r7, #24
 8000c8e:	2301      	movs	r3, #1
 8000c90:	2122      	movs	r1, #34	; 0x22
 8000c92:	68b8      	ldr	r0, [r7, #8]
 8000c94:	f7ff fece 	bl	8000a34 <lsm9ds1_write_reg>
 8000c98:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d107      	bne.n	8000cb0 <lsm9ds1_block_data_update_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8000ca0:	f107 0214 	add.w	r2, r7, #20
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	2124      	movs	r1, #36	; 0x24
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f7ff feab 	bl	8000a04 <lsm9ds1_read_reg>
 8000cae:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg5_m, 1);
  }

  if (ret == 0)
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d119      	bne.n	8000cea <lsm9ds1_block_data_update_set+0x94>
  {
    ctrl_reg5_m.fast_read = (uint8_t)(~val);
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	7d3b      	ldrb	r3, [r7, #20]
 8000cc4:	f362 13c7 	bfi	r3, r2, #7, #1
 8000cc8:	753b      	strb	r3, [r7, #20]
    ctrl_reg5_m.bdu = (uint8_t)val;
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	7d3b      	ldrb	r3, [r7, #20]
 8000cd4:	f362 1386 	bfi	r3, r2, #6, #1
 8000cd8:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8000cda:	f107 0214 	add.w	r2, r7, #20
 8000cde:	2301      	movs	r3, #1
 8000ce0:	2124      	movs	r1, #36	; 0x24
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff fea6 	bl	8000a34 <lsm9ds1_write_reg>
 8000ce8:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg5_m, 1);
  }

  return ret;
 8000cea:	69fb      	ldr	r3, [r7, #28]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <lsm9ds1_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_mag_data_rate_t val)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_m_t ctrl_reg1_m;
  lsm9ds1_ctrl_reg3_m_t ctrl_reg3_m;
  lsm9ds1_ctrl_reg4_m_t ctrl_reg4_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	2301      	movs	r3, #1
 8000d06:	2120      	movs	r1, #32
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fe7b 	bl	8000a04 <lsm9ds1_read_reg>
 8000d0e:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_m, 1);

  if (ret == 0)
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d125      	bne.n	8000d62 <lsm9ds1_mag_data_rate_set+0x6e>
  {
    ctrl_reg1_m.fast_odr = (((uint8_t)val & 0x08U) >> 3);
 8000d16:	78fb      	ldrb	r3, [r7, #3]
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	7c3b      	ldrb	r3, [r7, #16]
 8000d22:	f362 0341 	bfi	r3, r2, #1, #1
 8000d26:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m._do = ((uint8_t)val & 0x07U);
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	7c3b      	ldrb	r3, [r7, #16]
 8000d32:	f362 0384 	bfi	r3, r2, #2, #3
 8000d36:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.om = (((uint8_t)val & 0x30U) >> 4);
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	7c3b      	ldrb	r3, [r7, #16]
 8000d44:	f362 1346 	bfi	r3, r2, #5, #2
 8000d48:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.temp_comp = PROPERTY_ENABLE;
 8000d4a:	7c3b      	ldrb	r3, [r7, #16]
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8000d52:	f107 0210 	add.w	r2, r7, #16
 8000d56:	2301      	movs	r3, #1
 8000d58:	2120      	movs	r1, #32
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fe6a 	bl	8000a34 <lsm9ds1_write_reg>
 8000d60:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_m, 1);
  }

  if (ret == 0)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d107      	bne.n	8000d78 <lsm9ds1_mag_data_rate_set+0x84>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8000d68:	f107 020c 	add.w	r2, r7, #12
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	2122      	movs	r1, #34	; 0x22
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fe47 	bl	8000a04 <lsm9ds1_read_reg>
 8000d76:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d111      	bne.n	8000da2 <lsm9ds1_mag_data_rate_set+0xae>
  {
    ctrl_reg3_m.md = (((uint8_t)val & 0xC0U) >> 6);
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	099b      	lsrs	r3, r3, #6
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	7b3b      	ldrb	r3, [r7, #12]
 8000d8c:	f362 0301 	bfi	r3, r2, #0, #2
 8000d90:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8000d92:	f107 020c 	add.w	r2, r7, #12
 8000d96:	2301      	movs	r3, #1
 8000d98:	2122      	movs	r1, #34	; 0x22
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fe4a 	bl	8000a34 <lsm9ds1_write_reg>
 8000da0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d107      	bne.n	8000db8 <lsm9ds1_mag_data_rate_set+0xc4>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8000da8:	f107 0208 	add.w	r2, r7, #8
 8000dac:	2301      	movs	r3, #1
 8000dae:	2123      	movs	r1, #35	; 0x23
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff fe27 	bl	8000a04 <lsm9ds1_read_reg>
 8000db6:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg4_m, 1);
  }

  if (ret == 0)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d110      	bne.n	8000de0 <lsm9ds1_mag_data_rate_set+0xec>
  {
    ctrl_reg4_m.omz = (((uint8_t)val & 0x30U) >> 4);;
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	7a3b      	ldrb	r3, [r7, #8]
 8000dca:	f362 0383 	bfi	r3, r2, #2, #2
 8000dce:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8000dd0:	f107 0208 	add.w	r2, r7, #8
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	2123      	movs	r1, #35	; 0x23
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff fe2b 	bl	8000a34 <lsm9ds1_write_reg>
 8000dde:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4_m, 1);
  }

  return ret;
 8000de0:	697b      	ldr	r3, [r7, #20]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <lsm9ds1_mag_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm9ds1_mag_fs_t val)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	460b      	mov	r3, r1
 8000df4:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_M,
 8000df6:	f107 0208 	add.w	r2, r7, #8
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	2121      	movs	r1, #33	; 0x21
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fe00 	bl	8000a04 <lsm9ds1_read_reg>
 8000e04:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg2_m, 1);

  if (ret == 0)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d10f      	bne.n	8000e2c <lsm9ds1_mag_full_scale_set+0x42>
  {
    ctrl_reg2_m.fs = (uint8_t)val;
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	7a3b      	ldrb	r3, [r7, #8]
 8000e16:	f362 1346 	bfi	r3, r2, #5, #2
 8000e1a:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_M,
 8000e1c:	f107 0208 	add.w	r2, r7, #8
 8000e20:	2301      	movs	r3, #1
 8000e22:	2121      	movs	r1, #33	; 0x21
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fe05 	bl	8000a34 <lsm9ds1_write_reg>
 8000e2a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <lsm9ds1_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_G, buff, 6);
 8000e40:	f107 020c 	add.w	r2, r7, #12
 8000e44:	2306      	movs	r3, #6
 8000e46:	2118      	movs	r1, #24
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff fddb 	bl	8000a04 <lsm9ds1_read_reg>
 8000e4e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8000e50:	7b7b      	ldrb	r3, [r7, #13]
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	7b3b      	ldrb	r3, [r7, #12]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4413      	add	r3, r2
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b21a      	sxth	r2, r3
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8000e72:	7bfa      	ldrb	r2, [r7, #15]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	3302      	adds	r3, #2
 8000e78:	b212      	sxth	r2, r2
 8000e7a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	3302      	adds	r3, #2
 8000e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4413      	add	r3, r2
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	3302      	adds	r3, #2
 8000e96:	b212      	sxth	r2, r2
 8000e98:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8000e9a:	7c7a      	ldrb	r2, [r7, #17]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	b212      	sxth	r2, r2
 8000ea2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	3304      	adds	r3, #4
 8000ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	7c3b      	ldrb	r3, [r7, #16]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	b212      	sxth	r2, r2
 8000ec0:	801a      	strh	r2, [r3, #0]

  return ret;
 8000ec2:	697b      	ldr	r3, [r7, #20]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <lsm9ds1_acceleration_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_XL, buff, 6);
 8000ed6:	f107 020c 	add.w	r2, r7, #12
 8000eda:	2306      	movs	r3, #6
 8000edc:	2128      	movs	r1, #40	; 0x28
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fd90 	bl	8000a04 <lsm9ds1_read_reg>
 8000ee4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8000ee6:	7b7b      	ldrb	r3, [r7, #13]
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	7b3b      	ldrb	r3, [r7, #12]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	4413      	add	r3, r2
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	b212      	sxth	r2, r2
 8000f10:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	3302      	adds	r3, #2
 8000f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	4413      	add	r3, r2
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	b212      	sxth	r2, r2
 8000f2e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8000f30:	7c7a      	ldrb	r2, [r7, #17]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	3304      	adds	r3, #4
 8000f36:	b212      	sxth	r2, r2
 8000f38:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	7c3b      	ldrb	r3, [r7, #16]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	3304      	adds	r3, #4
 8000f54:	b212      	sxth	r2, r2
 8000f56:	801a      	strh	r2, [r3, #0]

  return ret;
 8000f58:	697b      	ldr	r3, [r7, #20]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <lsm9ds1_magnetic_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_M, buff, 6);
 8000f6c:	f107 020c 	add.w	r2, r7, #12
 8000f70:	2306      	movs	r3, #6
 8000f72:	2128      	movs	r1, #40	; 0x28
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fd45 	bl	8000a04 <lsm9ds1_read_reg>
 8000f7a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8000f7c:	7b7b      	ldrb	r3, [r7, #13]
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	7b3b      	ldrb	r3, [r7, #12]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	4413      	add	r3, r2
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	b212      	sxth	r2, r2
 8000fa6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	3302      	adds	r3, #2
 8000fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	b212      	sxth	r2, r2
 8000fc4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8000fc6:	7c7a      	ldrb	r2, [r7, #17]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	3304      	adds	r3, #4
 8000fcc:	b212      	sxth	r2, r2
 8000fce:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	7c3b      	ldrb	r3, [r7, #16]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	b212      	sxth	r2, r2
 8000fec:	801a      	strh	r2, [r3, #0]

  return ret;
 8000fee:	697b      	ldr	r3, [r7, #20]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <lsm9ds1_dev_id_get>:
  *
  */
int32_t lsm9ds1_dev_id_get(stmdev_ctx_t *ctx_mag,
                           stmdev_ctx_t *ctx_imu,
                           lsm9ds1_id_t *buff)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_WHO_AM_I,
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	2301      	movs	r3, #1
 8001008:	210f      	movs	r1, #15
 800100a:	68b8      	ldr	r0, [r7, #8]
 800100c:	f7ff fcfa 	bl	8000a04 <lsm9ds1_read_reg>
 8001010:	6178      	str	r0, [r7, #20]
                         (uint8_t *) & (buff->imu), 1);

  if (ret == 0)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d107      	bne.n	8001028 <lsm9ds1_dev_id_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_WHO_AM_I_M,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	2301      	movs	r3, #1
 800101e:	210f      	movs	r1, #15
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f7ff fcef 	bl	8000a04 <lsm9ds1_read_reg>
 8001026:	6178      	str	r0, [r7, #20]
                           (uint8_t *) & (buff->mag), 1);
  }

  return ret;
 8001028:	697b      	ldr	r3, [r7, #20]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <lsm9ds1_dev_status_get>:
  *
  */
int32_t lsm9ds1_dev_status_get(stmdev_ctx_t *ctx_mag,
                               stmdev_ctx_t *ctx_imu,
                               lsm9ds1_status_t *val)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
                         (uint8_t *) & (val->status_imu), 1);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	1c5a      	adds	r2, r3, #1
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
 8001042:	2301      	movs	r3, #1
 8001044:	2117      	movs	r1, #23
 8001046:	68b8      	ldr	r0, [r7, #8]
 8001048:	f7ff fcdc 	bl	8000a04 <lsm9ds1_read_reg>
 800104c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d106      	bne.n	8001062 <lsm9ds1_dev_status_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
                           (uint8_t *) & (val->status_mag), 1);
 8001054:	687a      	ldr	r2, [r7, #4]
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
 8001056:	2301      	movs	r3, #1
 8001058:	2127      	movs	r1, #39	; 0x27
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f7ff fcd2 	bl	8000a04 <lsm9ds1_read_reg>
 8001060:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001062:	697b      	ldr	r3, [r7, #20]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <lsm9ds1_dev_reset_set>:
  *
  */
int32_t lsm9ds1_dev_reset_set(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t val)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	4613      	mov	r3, r2
 8001078:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 800107a:	f107 0214 	add.w	r2, r7, #20
 800107e:	2301      	movs	r3, #1
 8001080:	2122      	movs	r1, #34	; 0x22
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f7ff fcbe 	bl	8000a04 <lsm9ds1_read_reg>
 8001088:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10f      	bne.n	80010b0 <lsm9ds1_dev_reset_set+0x44>
  {
    ctrl_reg8.sw_reset = (uint8_t)val;
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	7d3b      	ldrb	r3, [r7, #20]
 800109a:	f362 0300 	bfi	r3, r2, #0, #1
 800109e:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 80010a0:	f107 0214 	add.w	r2, r7, #20
 80010a4:	2301      	movs	r3, #1
 80010a6:	2122      	movs	r1, #34	; 0x22
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f7ff fcc3 	bl	8000a34 <lsm9ds1_write_reg>
 80010ae:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d107      	bne.n	80010c6 <lsm9ds1_dev_reset_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 80010b6:	f107 0218 	add.w	r2, r7, #24
 80010ba:	2301      	movs	r3, #1
 80010bc:	2121      	movs	r1, #33	; 0x21
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f7ff fca0 	bl	8000a04 <lsm9ds1_read_reg>
 80010c4:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
  }

  if (ret == 0)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10f      	bne.n	80010ec <lsm9ds1_dev_reset_set+0x80>
  {
    ctrl_reg2_m.soft_rst = (uint8_t)val;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	7e3b      	ldrb	r3, [r7, #24]
 80010d6:	f362 0382 	bfi	r3, r2, #2, #1
 80010da:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 80010dc:	f107 0218 	add.w	r2, r7, #24
 80010e0:	2301      	movs	r3, #1
 80010e2:	2121      	movs	r1, #33	; 0x21
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f7ff fca5 	bl	8000a34 <lsm9ds1_write_reg>
 80010ea:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 80010ec:	69fb      	ldr	r3, [r7, #28]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <lsm9ds1_dev_reset_get>:
  *
  */
int32_t lsm9ds1_dev_reset_get(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t *val)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b088      	sub	sp, #32
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8001102:	f107 0214 	add.w	r2, r7, #20
 8001106:	2301      	movs	r3, #1
 8001108:	2122      	movs	r1, #34	; 0x22
 800110a:	68b8      	ldr	r0, [r7, #8]
 800110c:	f7ff fc7a 	bl	8000a04 <lsm9ds1_read_reg>
 8001110:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d114      	bne.n	8001142 <lsm9ds1_dev_reset_get+0x4c>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8001118:	f107 0218 	add.w	r2, r7, #24
 800111c:	2301      	movs	r3, #1
 800111e:	2121      	movs	r1, #33	; 0x21
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff fc6f 	bl	8000a04 <lsm9ds1_read_reg>
 8001126:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
    *val = (uint8_t)(ctrl_reg2_m.soft_rst | ctrl_reg8.sw_reset);
 8001128:	7e3b      	ldrb	r3, [r7, #24]
 800112a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800112e:	b2da      	uxtb	r2, r3
 8001130:	7d3b      	ldrb	r3, [r7, #20]
 8001132:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8001142:	69fb      	ldr	r3, [r7, #28]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <lsm9ds1_gy_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_lp_bw_t val)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8001158:	f107 0208 	add.w	r2, r7, #8
 800115c:	2301      	movs	r3, #1
 800115e:	2110      	movs	r1, #16
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff fc4f 	bl	8000a04 <lsm9ds1_read_reg>
 8001166:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10f      	bne.n	800118e <lsm9ds1_gy_filter_lp_bandwidth_set+0x42>
  {
    ctrl_reg1_g.bw_g = (uint8_t)val;
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	b2da      	uxtb	r2, r3
 8001176:	7a3b      	ldrb	r3, [r7, #8]
 8001178:	f362 0301 	bfi	r3, r2, #0, #2
 800117c:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 800117e:	f107 0208 	add.w	r2, r7, #8
 8001182:	2301      	movs	r3, #1
 8001184:	2110      	movs	r1, #16
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fc54 	bl	8000a34 <lsm9ds1_write_reg>
 800118c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <lsm9ds1_gy_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_gy_out_path_t val)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_g_t ctrl_reg2_g;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_G,
 80011a4:	f107 0210 	add.w	r2, r7, #16
 80011a8:	2301      	movs	r3, #1
 80011aa:	2111      	movs	r1, #17
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff fc29 	bl	8000a04 <lsm9ds1_read_reg>
 80011b2:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg2_g, 1);

  if (ret == 0)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10f      	bne.n	80011da <lsm9ds1_gy_filter_out_path_set+0x42>
  {
    ctrl_reg2_g.out_sel = ((uint8_t)val & 0x03U);
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	7c3b      	ldrb	r3, [r7, #16]
 80011c4:	f362 0301 	bfi	r3, r2, #0, #2
 80011c8:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_G,
 80011ca:	f107 0210 	add.w	r2, r7, #16
 80011ce:	2301      	movs	r3, #1
 80011d0:	2111      	movs	r1, #17
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fc2e 	bl	8000a34 <lsm9ds1_write_reg>
 80011d8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg2_g, 1);
  }

  if (ret == 0)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d107      	bne.n	80011f0 <lsm9ds1_gy_filter_out_path_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80011e0:	f107 020c 	add.w	r2, r7, #12
 80011e4:	2301      	movs	r3, #1
 80011e6:	2112      	movs	r1, #18
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff fc0b 	bl	8000a04 <lsm9ds1_read_reg>
 80011ee:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d110      	bne.n	8001218 <lsm9ds1_gy_filter_out_path_set+0x80>
  {
    ctrl_reg3_g.hp_en = (((uint8_t)val & 0x10U) >> 4);
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	7b3b      	ldrb	r3, [r7, #12]
 8001202:	f362 1386 	bfi	r3, r2, #6, #1
 8001206:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8001208:	f107 020c 	add.w	r2, r7, #12
 800120c:	2301      	movs	r3, #1
 800120e:	2112      	movs	r1, #18
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff fc0f 	bl	8000a34 <lsm9ds1_write_reg>
 8001216:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8001218:	697b      	ldr	r3, [r7, #20]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <lsm9ds1_gy_filter_hp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_hp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_hp_bw_t val)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 800122e:	f107 0208 	add.w	r2, r7, #8
 8001232:	2301      	movs	r3, #1
 8001234:	2112      	movs	r1, #18
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fbe4 	bl	8000a04 <lsm9ds1_read_reg>
 800123c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg3_g, 1);

  if (ret == 0)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10f      	bne.n	8001264 <lsm9ds1_gy_filter_hp_bandwidth_set+0x42>
  {
    ctrl_reg3_g.hpcf_g = (uint8_t)val;
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	b2da      	uxtb	r2, r3
 800124c:	7a3b      	ldrb	r3, [r7, #8]
 800124e:	f362 0303 	bfi	r3, r2, #0, #4
 8001252:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8001254:	f107 0208 	add.w	r2, r7, #8
 8001258:	2301      	movs	r3, #1
 800125a:	2112      	movs	r1, #18
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff fbe9 	bl	8000a34 <lsm9ds1_write_reg>
 8001262:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8001264:	68fb      	ldr	r3, [r7, #12]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <lsm9ds1_xl_filter_aalias_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_aalias_bandwidth_set(stmdev_ctx_t *ctx,
                                               lsm9ds1_xl_aa_bw_t val)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800127a:	f107 0208 	add.w	r2, r7, #8
 800127e:	2301      	movs	r3, #1
 8001280:	2120      	movs	r1, #32
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fbbe 	bl	8000a04 <lsm9ds1_read_reg>
 8001288:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d118      	bne.n	80012c2 <lsm9ds1_xl_filter_aalias_bandwidth_set+0x54>
  {
    ctrl_reg6_xl.bw_xl = ((uint8_t)val & 0x03U);
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	b2da      	uxtb	r2, r3
 8001298:	7a3b      	ldrb	r3, [r7, #8]
 800129a:	f362 0301 	bfi	r3, r2, #0, #2
 800129e:	723b      	strb	r3, [r7, #8]
    ctrl_reg6_xl.bw_scal_odr = (((uint8_t)val & 0x10U) >> 4);
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	7a3b      	ldrb	r3, [r7, #8]
 80012ac:	f362 0382 	bfi	r3, r2, #2, #1
 80012b0:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80012b2:	f107 0208 	add.w	r2, r7, #8
 80012b6:	2301      	movs	r3, #1
 80012b8:	2120      	movs	r1, #32
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fbba 	bl	8000a34 <lsm9ds1_write_reg>
 80012c0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <lsm9ds1_xl_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_xl_out_path_t val)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 80012d8:	f107 0208 	add.w	r2, r7, #8
 80012dc:	2301      	movs	r3, #1
 80012de:	2121      	movs	r1, #33	; 0x21
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff fb8f 	bl	8000a04 <lsm9ds1_read_reg>
 80012e6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10f      	bne.n	800130e <lsm9ds1_xl_filter_out_path_set+0x42>
  {
    ctrl_reg7_xl.fds = (uint8_t)val;
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	7a3b      	ldrb	r3, [r7, #8]
 80012f8:	f362 0382 	bfi	r3, r2, #2, #1
 80012fc:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 80012fe:	f107 0208 	add.w	r2, r7, #8
 8001302:	2301      	movs	r3, #1
 8001304:	2121      	movs	r1, #33	; 0x21
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fb94 	bl	8000a34 <lsm9ds1_write_reg>
 800130c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <lsm9ds1_xl_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_xl_lp_bw_t val)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8001324:	f107 0208 	add.w	r2, r7, #8
 8001328:	2301      	movs	r3, #1
 800132a:	2121      	movs	r1, #33	; 0x21
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff fb69 	bl	8000a04 <lsm9ds1_read_reg>
 8001332:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d118      	bne.n	800136c <lsm9ds1_xl_filter_lp_bandwidth_set+0x54>
  {
    ctrl_reg7_xl.hr = ((uint8_t)val & 0x10U) >> 4;
 800133a:	78fb      	ldrb	r3, [r7, #3]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	b2da      	uxtb	r2, r3
 8001344:	7a3b      	ldrb	r3, [r7, #8]
 8001346:	f362 13c7 	bfi	r3, r2, #7, #1
 800134a:	723b      	strb	r3, [r7, #8]
    ctrl_reg7_xl.dcf = ((uint8_t)val & 0x03U);
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	b2da      	uxtb	r2, r3
 8001354:	7a3b      	ldrb	r3, [r7, #8]
 8001356:	f362 1346 	bfi	r3, r2, #5, #2
 800135a:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 800135c:	f107 0208 	add.w	r2, r7, #8
 8001360:	2301      	movs	r3, #1
 8001362:	2121      	movs	r1, #33	; 0x21
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fb65 	bl	8000a34 <lsm9ds1_write_reg>
 800136a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 800136c:	68fb      	ldr	r3, [r7, #12]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <platform_write_imu>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static int32_t platform_write_imu(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b08a      	sub	sp, #40	; 0x28
 800137a:	af04      	add	r7, sp, #16
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	461a      	mov	r2, r3
 8001382:	460b      	mov	r3, r1
 8001384:	72fb      	strb	r3, [r7, #11]
 8001386:	4613      	mov	r3, r2
 8001388:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t *)handle;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	617b      	str	r3, [r7, #20]

  HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	791b      	ldrb	r3, [r3, #4]
 8001396:	b299      	uxth	r1, r3
 8001398:	7afb      	ldrb	r3, [r7, #11]
 800139a:	b29a      	uxth	r2, r3
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	893b      	ldrh	r3, [r7, #8]
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	f000 fdd2 	bl	8001f54 <HAL_I2C_Mem_Write>
  return 0;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <platform_write_mag>:

static int32_t platform_write_mag(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b08a      	sub	sp, #40	; 0x28
 80013be:	af04      	add	r7, sp, #16
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	461a      	mov	r2, r3
 80013c6:	460b      	mov	r3, r1
 80013c8:	72fb      	strb	r3, [r7, #11]
 80013ca:	4613      	mov	r3, r2
 80013cc:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	617b      	str	r3, [r7, #20]
	reg |= 0x80;
 80013d2:	7afb      	ldrb	r3, [r7, #11]
 80013d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013d8:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	791b      	ldrb	r3, [r3, #4]
 80013e2:	b299      	uxth	r1, r3
 80013e4:	7afb      	ldrb	r3, [r7, #11]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	893b      	ldrh	r3, [r7, #8]
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	f000 fdac 	bl	8001f54 <HAL_I2C_Mem_Write>
	  return 0;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <platform_read_imu>:

static int32_t platform_read_imu(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b08a      	sub	sp, #40	; 0x28
 800140a:	af04      	add	r7, sp, #16
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	461a      	mov	r2, r3
 8001412:	460b      	mov	r3, r1
 8001414:	72fb      	strb	r3, [r7, #11]
 8001416:	4613      	mov	r3, r2
 8001418:	813b      	strh	r3, [r7, #8]
	  sensbus_t *sensbus = (sensbus_t *)handle;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	617b      	str	r3, [r7, #20]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	791b      	ldrb	r3, [r3, #4]
 8001426:	b299      	uxth	r1, r3
 8001428:	7afb      	ldrb	r3, [r7, #11]
 800142a:	b29a      	uxth	r2, r3
 800142c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	893b      	ldrh	r3, [r7, #8]
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2301      	movs	r3, #1
 800143c:	f000 fe9e 	bl	800217c <HAL_I2C_Mem_Read>
	  return 0;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <platform_read_mag>:

static int32_t platform_read_mag(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b08a      	sub	sp, #40	; 0x28
 800144e:	af04      	add	r7, sp, #16
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	461a      	mov	r2, r3
 8001456:	460b      	mov	r3, r1
 8001458:	72fb      	strb	r3, [r7, #11]
 800145a:	4613      	mov	r3, r2
 800145c:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	617b      	str	r3, [r7, #20]
	  reg |= 0x80;
 8001462:	7afb      	ldrb	r3, [r7, #11]
 8001464:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001468:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	b299      	uxth	r1, r3
 8001474:	7afb      	ldrb	r3, [r7, #11]
 8001476:	b29a      	uxth	r2, r3
 8001478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147c:	9302      	str	r3, [sp, #8]
 800147e:	893b      	ldrh	r3, [r7, #8]
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2301      	movs	r3, #1
 8001488:	f000 fe78 	bl	800217c <HAL_I2C_Mem_Read>
	  return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <platform_delay>:

static void platform_delay(uint32_t ms)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 fbb6 	bl	8001c10 <HAL_Delay>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	0000      	movs	r0, r0
	...

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b6:	f000 fb45 	bl	8001b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ba:	f000 f9f3 	bl	80018a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014be:	f000 fa81 	bl	80019c4 <MX_GPIO_Init>
//  MX_ADC1_Init();
//  MX_ADC2_Init();
//  MX_ADC3_Init();
//  MX_ADC4_Init();
  MX_I2C1_Init();
 80014c2:	f000 fa3f 	bl	8001944 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  stmdev_ctx_t dev_ctx_imu;
  stmdev_ctx_t dev_ctx_mag;
  /* Initialize inertial sensors (IMU) driver interface */
  dev_ctx_imu.write_reg = platform_write_imu;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <main+0x58>)
 80014c8:	613b      	str	r3, [r7, #16]
  dev_ctx_imu.read_reg = platform_read_imu;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <main+0x5c>)
 80014cc:	617b      	str	r3, [r7, #20]
  dev_ctx_imu.handle = (void *)&imu_bus;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <main+0x60>)
 80014d0:	61fb      	str	r3, [r7, #28]
  /* Initialize magnetic sensors driver interface */
  dev_ctx_mag.write_reg = platform_write_mag;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <main+0x64>)
 80014d4:	603b      	str	r3, [r7, #0]
  dev_ctx_mag.read_reg = platform_read_mag;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <main+0x68>)
 80014d8:	607b      	str	r3, [r7, #4]
  dev_ctx_mag.handle = (void *)&mag_bus;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <main+0x6c>)
 80014dc:	60fb      	str	r3, [r7, #12]

  platform_delay(BOOT_TIME);
 80014de:	2014      	movs	r0, #20
 80014e0:	f7ff ffd9 	bl	8001496 <platform_delay>
  /* Check device ID */
  lsm9ds1_dev_id_get(&dev_ctx_mag, &dev_ctx_imu, &whoamI);
 80014e4:	f107 0110 	add.w	r1, r7, #16
 80014e8:	463b      	mov	r3, r7
 80014ea:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <main+0x70>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fd83 	bl	8000ff8 <lsm9ds1_dev_id_get>

  if (whoamI.imu != LSM9DS1_IMU_ID || whoamI.mag != LSM9DS1_MAG_ID) {
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <main+0x70>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b68      	cmp	r3, #104	; 0x68
 80014f8:	d103      	bne.n	8001502 <main+0x52>
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <main+0x70>)
 80014fc:	785b      	ldrb	r3, [r3, #1]
 80014fe:	2b3d      	cmp	r3, #61	; 0x3d
 8001500:	d010      	beq.n	8001524 <main+0x74>
	  while (1) {
		  /* device not found management */
		  return 1;
 8001502:	2301      	movs	r3, #1
 8001504:	e1a9      	b.n	800185a <main+0x3aa>
 8001506:	bf00      	nop
 8001508:	08001377 	.word	0x08001377
 800150c:	08001407 	.word	0x08001407
 8001510:	20000010 	.word	0x20000010
 8001514:	080013bb 	.word	0x080013bb
 8001518:	0800144b 	.word	0x0800144b
 800151c:	20000000 	.word	0x20000000
 8001520:	200000d8 	.word	0x200000d8
	  }
  }

  /* Restore default configuration */
  lsm9ds1_dev_reset_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 8001524:	f107 0110 	add.w	r1, r7, #16
 8001528:	463b      	mov	r3, r7
 800152a:	2201      	movs	r2, #1
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fd9d 	bl	800106c <lsm9ds1_dev_reset_set>

  do {
	  lsm9ds1_dev_reset_get(&dev_ctx_mag, &dev_ctx_imu, &rst);
 8001532:	f107 0110 	add.w	r1, r7, #16
 8001536:	463b      	mov	r3, r7
 8001538:	4ad1      	ldr	r2, [pc, #836]	; (8001880 <main+0x3d0>)
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fddb 	bl	80010f6 <lsm9ds1_dev_reset_get>
  } while (rst);
 8001540:	4bcf      	ldr	r3, [pc, #828]	; (8001880 <main+0x3d0>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f4      	bne.n	8001532 <main+0x82>

  /* Enable Block Data Update */
  lsm9ds1_block_data_update_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 8001548:	f107 0110 	add.w	r1, r7, #16
 800154c:	463b      	mov	r3, r7
 800154e:	2201      	movs	r2, #1
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fb80 	bl	8000c56 <lsm9ds1_block_data_update_set>

  /* Set full scale */
  lsm9ds1_xl_full_scale_set(&dev_ctx_imu, LSM9DS1_4g);
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	2102      	movs	r1, #2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fb54 	bl	8000c0a <lsm9ds1_xl_full_scale_set>
  lsm9ds1_gy_full_scale_set(&dev_ctx_imu, LSM9DS1_2000dps);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	2103      	movs	r1, #3
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fac3 	bl	8000af4 <lsm9ds1_gy_full_scale_set>
  lsm9ds1_mag_full_scale_set(&dev_ctx_mag, LSM9DS1_16Ga);
 800156e:	463b      	mov	r3, r7
 8001570:	2103      	movs	r1, #3
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fc39 	bl	8000dea <lsm9ds1_mag_full_scale_set>
  /* Configure filtering chain - See datasheet for filtering chain details */
  /* Accelerometer filtering chain */
  lsm9ds1_xl_filter_aalias_bandwidth_set(&dev_ctx_imu, LSM9DS1_AUTO);
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fe75 	bl	800126e <lsm9ds1_xl_filter_aalias_bandwidth_set>
  lsm9ds1_xl_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ODR_DIV_50);
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	2110      	movs	r1, #16
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fec4 	bl	8001318 <lsm9ds1_xl_filter_lp_bandwidth_set>
  lsm9ds1_xl_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LP_OUT);
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fe98 	bl	80012cc <lsm9ds1_xl_filter_out_path_set>
  /* Gyroscope filtering chain */
  lsm9ds1_gy_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ULTRA_LIGHT);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	2103      	movs	r1, #3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fdd2 	bl	800114c <lsm9ds1_gy_filter_lp_bandwidth_set>
  lsm9ds1_gy_filter_hp_bandwidth_set(&dev_ctx_imu, LSM9DS1_HP_MEDIUM);
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	2105      	movs	r1, #5
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fe37 	bl	8001222 <lsm9ds1_gy_filter_hp_bandwidth_set>
  lsm9ds1_gy_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LPF1_HPF_LPF2_OUT);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	2112      	movs	r1, #18
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fdec 	bl	8001198 <lsm9ds1_gy_filter_out_path_set>
  /* Set Output Data Rate / Power mode */
  lsm9ds1_imu_data_rate_set(&dev_ctx_imu, LSM9DS1_IMU_59Hz5);
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	2122      	movs	r1, #34	; 0x22
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff faba 	bl	8000b40 <lsm9ds1_imu_data_rate_set>
  lsm9ds1_mag_data_rate_set(&dev_ctx_mag, LSM9DS1_MAG_UHP_10Hz);
 80015cc:	463b      	mov	r3, r7
 80015ce:	2134      	movs	r1, #52	; 0x34
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fb8f 	bl	8000cf4 <lsm9ds1_mag_data_rate_set>

	  /* ADC READ END */


	  /* IMU READ BEGIN */
	  lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 80015d6:	f107 0110 	add.w	r1, r7, #16
 80015da:	463b      	mov	r3, r7
 80015dc:	4aa9      	ldr	r2, [pc, #676]	; (8001884 <main+0x3d4>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fd27 	bl	8001032 <lsm9ds1_dev_status_get>

	  if (reg.status_imu.xlda && reg.status_imu.gda) {
 80015e4:	4ba7      	ldr	r3, [pc, #668]	; (8001884 <main+0x3d4>)
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80f3 	beq.w	80017da <main+0x32a>
 80015f4:	4ba3      	ldr	r3, [pc, #652]	; (8001884 <main+0x3d4>)
 80015f6:	785b      	ldrb	r3, [r3, #1]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80eb 	beq.w	80017da <main+0x32a>
		  /* Read imu data */
		  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001604:	2206      	movs	r2, #6
 8001606:	2100      	movs	r1, #0
 8001608:	489f      	ldr	r0, [pc, #636]	; (8001888 <main+0x3d8>)
 800160a:	f002 fe19 	bl	8004240 <memset>
		  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800160e:	2206      	movs	r2, #6
 8001610:	2100      	movs	r1, #0
 8001612:	489e      	ldr	r0, [pc, #632]	; (800188c <main+0x3dc>)
 8001614:	f002 fe14 	bl	8004240 <memset>
		  lsm9ds1_acceleration_raw_get(&dev_ctx_imu,
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	499a      	ldr	r1, [pc, #616]	; (8001888 <main+0x3d8>)
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fc54 	bl	8000ecc <lsm9ds1_acceleration_raw_get>
				  data_raw_acceleration);
		  lsm9ds1_angular_rate_raw_get(&dev_ctx_imu,
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	4998      	ldr	r1, [pc, #608]	; (800188c <main+0x3dc>)
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fc03 	bl	8000e36 <lsm9ds1_angular_rate_raw_get>
				  data_raw_angular_rate);
		  acceleration_mg[0] = (lsm9ds1_from_fs4g_to_mg(
 8001630:	4b95      	ldr	r3, [pc, #596]	; (8001888 <main+0x3d8>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fa14 	bl	8000a64 <lsm9ds1_from_fs4g_to_mg>
 800163c:	ee10 3a10 	vmov	r3, s0
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff25 	bl	8000490 <__aeabi_f2d>
				  data_raw_acceleration[0]) * 9.807) / 1000; //convert to m/s^2 from micro-gees
 8001646:	a388      	add	r3, pc, #544	; (adr r3, 8001868 <main+0x3b8>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe ff78 	bl	8000540 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b8c      	ldr	r3, [pc, #560]	; (8001890 <main+0x3e0>)
 800165e:	f7ff f899 	bl	8000794 <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff f97b 	bl	8000964 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
		  acceleration_mg[0] = (lsm9ds1_from_fs4g_to_mg(
 8001670:	4a88      	ldr	r2, [pc, #544]	; (8001894 <main+0x3e4>)
 8001672:	6013      	str	r3, [r2, #0]
				  acceleration_mg[1] = (lsm9ds1_from_fs4g_to_mg(
 8001674:	4b84      	ldr	r3, [pc, #528]	; (8001888 <main+0x3d8>)
 8001676:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f9f2 	bl	8000a64 <lsm9ds1_from_fs4g_to_mg>
 8001680:	ee10 3a10 	vmov	r3, s0
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff03 	bl	8000490 <__aeabi_f2d>
						  data_raw_acceleration[1]) * 9.807)/ 1000;
 800168a:	a377      	add	r3, pc, #476	; (adr r3, 8001868 <main+0x3b8>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7fe ff56 	bl	8000540 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b7b      	ldr	r3, [pc, #492]	; (8001890 <main+0x3e0>)
 80016a2:	f7ff f877 	bl	8000794 <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff f959 	bl	8000964 <__aeabi_d2f>
 80016b2:	4603      	mov	r3, r0
				  acceleration_mg[1] = (lsm9ds1_from_fs4g_to_mg(
 80016b4:	4a77      	ldr	r2, [pc, #476]	; (8001894 <main+0x3e4>)
 80016b6:	6053      	str	r3, [r2, #4]
				  acceleration_mg[2] = (lsm9ds1_from_fs4g_to_mg(
 80016b8:	4b73      	ldr	r3, [pc, #460]	; (8001888 <main+0x3d8>)
 80016ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff f9d0 	bl	8000a64 <lsm9ds1_from_fs4g_to_mg>
 80016c4:	ee10 3a10 	vmov	r3, s0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fee1 	bl	8000490 <__aeabi_f2d>
						  data_raw_acceleration[2]) * 9.807) / 1000;
 80016ce:	a366      	add	r3, pc, #408	; (adr r3, 8001868 <main+0x3b8>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe ff34 	bl	8000540 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4b6a      	ldr	r3, [pc, #424]	; (8001890 <main+0x3e0>)
 80016e6:	f7ff f855 	bl	8000794 <__aeabi_ddiv>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f7ff f937 	bl	8000964 <__aeabi_d2f>
 80016f6:	4603      	mov	r3, r0
				  acceleration_mg[2] = (lsm9ds1_from_fs4g_to_mg(
 80016f8:	4a66      	ldr	r2, [pc, #408]	; (8001894 <main+0x3e4>)
 80016fa:	6093      	str	r3, [r2, #8]
				  angular_rate_mdps[0] = (lsm9ds1_from_fs2000dps_to_mdps(
 80016fc:	4b63      	ldr	r3, [pc, #396]	; (800188c <main+0x3dc>)
 80016fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f9c6 	bl	8000a94 <lsm9ds1_from_fs2000dps_to_mdps>
 8001708:	eef0 7a40 	vmov.f32	s15, s0
						  data_raw_angular_rate[0]) * 2 * PI)/360000;
 800170c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001710:	ee17 0a90 	vmov	r0, s15
 8001714:	f7fe febc 	bl	8000490 <__aeabi_f2d>
 8001718:	a355      	add	r3, pc, #340	; (adr r3, 8001870 <main+0x3c0>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe ff0f 	bl	8000540 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	a353      	add	r3, pc, #332	; (adr r3, 8001878 <main+0x3c8>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7ff f830 	bl	8000794 <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff f912 	bl	8000964 <__aeabi_d2f>
 8001740:	4603      	mov	r3, r0
				  angular_rate_mdps[0] = (lsm9ds1_from_fs2000dps_to_mdps(
 8001742:	4a55      	ldr	r2, [pc, #340]	; (8001898 <main+0x3e8>)
 8001744:	6013      	str	r3, [r2, #0]
				  angular_rate_mdps[1] = (lsm9ds1_from_fs2000dps_to_mdps(
 8001746:	4b51      	ldr	r3, [pc, #324]	; (800188c <main+0x3dc>)
 8001748:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff f9a1 	bl	8000a94 <lsm9ds1_from_fs2000dps_to_mdps>
 8001752:	eef0 7a40 	vmov.f32	s15, s0
						  data_raw_angular_rate[1]) * 2 * PI)/360000;
 8001756:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800175a:	ee17 0a90 	vmov	r0, s15
 800175e:	f7fe fe97 	bl	8000490 <__aeabi_f2d>
 8001762:	a343      	add	r3, pc, #268	; (adr r3, 8001870 <main+0x3c0>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7fe feea 	bl	8000540 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	a340      	add	r3, pc, #256	; (adr r3, 8001878 <main+0x3c8>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7ff f80b 	bl	8000794 <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff f8ed 	bl	8000964 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
				  angular_rate_mdps[1] = (lsm9ds1_from_fs2000dps_to_mdps(
 800178c:	4a42      	ldr	r2, [pc, #264]	; (8001898 <main+0x3e8>)
 800178e:	6053      	str	r3, [r2, #4]
				  angular_rate_mdps[2] = (lsm9ds1_from_fs2000dps_to_mdps(
 8001790:	4b3e      	ldr	r3, [pc, #248]	; (800188c <main+0x3dc>)
 8001792:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f97c 	bl	8000a94 <lsm9ds1_from_fs2000dps_to_mdps>
 800179c:	eef0 7a40 	vmov.f32	s15, s0
						  data_raw_angular_rate[2]) * 2 * PI)/360000;
 80017a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017a4:	ee17 0a90 	vmov	r0, s15
 80017a8:	f7fe fe72 	bl	8000490 <__aeabi_f2d>
 80017ac:	a330      	add	r3, pc, #192	; (adr r3, 8001870 <main+0x3c0>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7fe fec5 	bl	8000540 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	a32e      	add	r3, pc, #184	; (adr r3, 8001878 <main+0x3c8>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe ffe6 	bl	8000794 <__aeabi_ddiv>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff f8c8 	bl	8000964 <__aeabi_d2f>
 80017d4:	4603      	mov	r3, r0
				  angular_rate_mdps[2] = (lsm9ds1_from_fs2000dps_to_mdps(
 80017d6:	4a30      	ldr	r2, [pc, #192]	; (8001898 <main+0x3e8>)
 80017d8:	6093      	str	r3, [r2, #8]
				  //tx_com(tx_buffer, strlen((char const *)tx_buffer));
	  }

	  if (reg.status_mag.zyxda) {
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <main+0x3d4>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f43f aef6 	beq.w	80015d6 <main+0x126>
		  /* Read magnetometer data */
		  memset(data_raw_magnetic_field, 0x00, 3 * sizeof(int16_t));
 80017ea:	2206      	movs	r2, #6
 80017ec:	2100      	movs	r1, #0
 80017ee:	482b      	ldr	r0, [pc, #172]	; (800189c <main+0x3ec>)
 80017f0:	f002 fd26 	bl	8004240 <memset>
		  lsm9ds1_magnetic_raw_get(&dev_ctx_mag, data_raw_magnetic_field);
 80017f4:	463b      	mov	r3, r7
 80017f6:	4929      	ldr	r1, [pc, #164]	; (800189c <main+0x3ec>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fbb2 	bl	8000f62 <lsm9ds1_magnetic_raw_get>
		  magnetic_field_mgauss[0] = lsm9ds1_from_fs16gauss_to_mG(
 80017fe:	4b27      	ldr	r3, [pc, #156]	; (800189c <main+0x3ec>)
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff f95d 	bl	8000ac4 <lsm9ds1_from_fs16gauss_to_mG>
 800180a:	eeb0 7a40 	vmov.f32	s14, s0
				  data_raw_magnetic_field[0]) / 10;
 800180e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001812:	eec7 7a26 	vdiv.f32	s15, s14, s13
		  magnetic_field_mgauss[0] = lsm9ds1_from_fs16gauss_to_mG(
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <main+0x3f0>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
		  magnetic_field_mgauss[1] = lsm9ds1_from_fs16gauss_to_mG(
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <main+0x3ec>)
 800181e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f94e 	bl	8000ac4 <lsm9ds1_from_fs16gauss_to_mG>
 8001828:	eeb0 7a40 	vmov.f32	s14, s0
				  data_raw_magnetic_field[1]) / 10;
 800182c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001830:	eec7 7a26 	vdiv.f32	s15, s14, s13
		  magnetic_field_mgauss[1] = lsm9ds1_from_fs16gauss_to_mG(
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <main+0x3f0>)
 8001836:	edc3 7a01 	vstr	s15, [r3, #4]
		  magnetic_field_mgauss[2] = lsm9ds1_from_fs16gauss_to_mG(
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <main+0x3ec>)
 800183c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff f93f 	bl	8000ac4 <lsm9ds1_from_fs16gauss_to_mG>
 8001846:	eeb0 7a40 	vmov.f32	s14, s0
				  data_raw_magnetic_field[2]) / 10;
 800184a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800184e:	eec7 7a26 	vdiv.f32	s15, s14, s13
		  magnetic_field_mgauss[2] = lsm9ds1_from_fs16gauss_to_mG(
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <main+0x3f0>)
 8001854:	edc3 7a02 	vstr	s15, [r3, #8]
	  lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 8001858:	e6bd      	b.n	80015d6 <main+0x126>
	  }

	  /* IMU READ END */
  }
  /* USER CODE END 3 */
}
 800185a:	4618      	mov	r0, r3
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	f3af 8000 	nop.w
 8001868:	1a9fbe77 	.word	0x1a9fbe77
 800186c:	40239d2f 	.word	0x40239d2f
 8001870:	35f80991 	.word	0x35f80991
 8001874:	40092492 	.word	0x40092492
 8001878:	00000000 	.word	0x00000000
 800187c:	4115f900 	.word	0x4115f900
 8001880:	200000de 	.word	0x200000de
 8001884:	200000dc 	.word	0x200000dc
 8001888:	2000009c 	.word	0x2000009c
 800188c:	200000a4 	.word	0x200000a4
 8001890:	408f4000 	.word	0x408f4000
 8001894:	200000b4 	.word	0x200000b4
 8001898:	200000c0 	.word	0x200000c0
 800189c:	200000ac 	.word	0x200000ac
 80018a0:	200000cc 	.word	0x200000cc

080018a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b09e      	sub	sp, #120	; 0x78
 80018a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018ae:	2228      	movs	r2, #40	; 0x28
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f002 fcc4 	bl	8004240 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c8:	463b      	mov	r3, r7
 80018ca:	223c      	movs	r2, #60	; 0x3c
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 fcb6 	bl	8004240 <memset>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d4:	2302      	movs	r3, #2
 80018d6:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d8:	2301      	movs	r3, #1
 80018da:	663b      	str	r3, [r7, #96]	; 0x60
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018dc:	2310      	movs	r3, #16
 80018de:	667b      	str	r3, [r7, #100]	; 0x64
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018e8:	4618      	mov	r0, r3
 80018ea:	f001 f8b1 	bl	8002a50 <HAL_RCC_OscConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0x54>
	  {
	    Error_Handler();
 80018f4:	f000 f896 	bl	8001a24 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f8:	230f      	movs	r3, #15
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018fc:	2300      	movs	r3, #0
 80018fe:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001904:	2300      	movs	r3, #0
 8001906:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001908:	2300      	movs	r3, #0
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800190c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f002 f8da 	bl	8003acc <HAL_RCC_ClockConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0x7e>
	  {
	    Error_Handler();
 800191e:	f000 f881 	bl	8001a24 <Error_Handler>
	  }
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001922:	2320      	movs	r3, #32
 8001924:	603b      	str	r3, [r7, #0]
	  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192a:	463b      	mov	r3, r7
 800192c:	4618      	mov	r0, r3
 800192e:	f002 fab3 	bl	8003e98 <HAL_RCCEx_PeriphCLKConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <SystemClock_Config+0x98>
	  {
	    Error_Handler();
 8001938:	f000 f874 	bl	8001a24 <Error_Handler>
	  }
}
 800193c:	bf00      	nop
 800193e:	3778      	adds	r7, #120	; 0x78
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <MX_I2C1_Init+0x74>)
 800194a:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <MX_I2C1_Init+0x78>)
 800194c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_I2C1_Init+0x74>)
 8001950:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <MX_I2C1_Init+0x7c>)
 8001952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_I2C1_Init+0x74>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_I2C1_Init+0x74>)
 800195c:	2201      	movs	r2, #1
 800195e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_I2C1_Init+0x74>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_I2C1_Init+0x74>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_I2C1_Init+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_I2C1_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_I2C1_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800197e:	480e      	ldr	r0, [pc, #56]	; (80019b8 <MX_I2C1_Init+0x74>)
 8001980:	f000 fa4f 	bl	8001e22 <HAL_I2C_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800198a:	f000 f84b 	bl	8001a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800198e:	2100      	movs	r1, #0
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <MX_I2C1_Init+0x74>)
 8001992:	f000 ffc5 	bl	8002920 <HAL_I2CEx_ConfigAnalogFilter>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800199c:	f000 f842 	bl	8001a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019a0:	2100      	movs	r1, #0
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_I2C1_Init+0x74>)
 80019a4:	f001 f807 	bl	80029b6 <HAL_I2CEx_ConfigDigitalFilter>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019ae:	f000 f839 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000048 	.word	0x20000048
 80019bc:	40005400 	.word	0x40005400
 80019c0:	2000090e 	.word	0x2000090e

080019c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_GPIO_Init+0x5c>)
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <MX_GPIO_Init+0x5c>)
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	6153      	str	r3, [r2, #20]
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_GPIO_Init+0x5c>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_GPIO_Init+0x5c>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <MX_GPIO_Init+0x5c>)
 80019e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ec:	6153      	str	r3, [r2, #20]
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_GPIO_Init+0x5c>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_GPIO_Init+0x5c>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <MX_GPIO_Init+0x5c>)
 8001a00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a04:	6153      	str	r3, [r2, #20]
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_GPIO_Init+0x5c>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <Error_Handler+0x8>
	...

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_MspInit+0x44>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <HAL_MspInit+0x44>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6193      	str	r3, [r2, #24]
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_MspInit+0x44>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_MspInit+0x44>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <HAL_MspInit+0x44>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a58:	61d3      	str	r3, [r2, #28]
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_MspInit+0x44>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac4:	f000 f884 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b28 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af4:	f7ff ffea 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af8:	480c      	ldr	r0, [pc, #48]	; (8001b2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001afa:	490d      	ldr	r1, [pc, #52]	; (8001b30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001afc:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <LoopForever+0xe>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b00:	e002      	b.n	8001b08 <LoopCopyDataInit>

08001b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b06:	3304      	adds	r3, #4

08001b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b0c:	d3f9      	bcc.n	8001b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b10:	4c0a      	ldr	r4, [pc, #40]	; (8001b3c <LoopForever+0x16>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b14:	e001      	b.n	8001b1a <LoopFillZerobss>

08001b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b18:	3204      	adds	r2, #4

08001b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b1c:	d3fb      	bcc.n	8001b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f002 fb6b 	bl	80041f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b22:	f7ff fcc5 	bl	80014b0 <main>

08001b26 <LoopForever>:

LoopForever:
    b LoopForever
 8001b26:	e7fe      	b.n	8001b26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b28:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b30:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001b34:	080042a0 	.word	0x080042a0
  ldr r2, =_sbss
 8001b38:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001b3c:	200000e4 	.word	0x200000e4

08001b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC1_2_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_Init+0x28>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <HAL_Init+0x28>)
 8001b4e:	f043 0310 	orr.w	r3, r3, #16
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f000 f931 	bl	8001dbc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5a:	200f      	movs	r0, #15
 8001b5c:	f000 f808 	bl	8001b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b60:	f7ff ff66 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40022000 	.word	0x40022000

08001b70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_InitTick+0x54>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_InitTick+0x58>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f93b 	bl	8001e0a <HAL_SYSTICK_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00e      	b.n	8001bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b0f      	cmp	r3, #15
 8001ba2:	d80a      	bhi.n	8001bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bac:	f000 f911 	bl	8001dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb0:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <HAL_InitTick+0x5c>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000020 	.word	0x20000020
 8001bc8:	20000028 	.word	0x20000028
 8001bcc:	20000024 	.word	0x20000024

08001bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_IncTick+0x24>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <HAL_IncTick+0x24>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000028 	.word	0x20000028
 8001bf4:	200000e0 	.word	0x200000e0

08001bf8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;  
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_GetTick+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	200000e0 	.word	0x200000e0

08001c10 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff ffee 	bl	8001bf8 <HAL_GetTick>
 8001c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c28:	d005      	beq.n	8001c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_Delay+0x44>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c36:	bf00      	nop
 8001c38:	f7ff ffde 	bl	8001bf8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d8f7      	bhi.n	8001c38 <HAL_Delay+0x28>
  {
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000028 	.word	0x20000028

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	; (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	; (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d88:	d301      	bcc.n	8001d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00f      	b.n	8001dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <SysTick_Config+0x40>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d96:	210f      	movs	r1, #15
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d9c:	f7ff ff8e 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <SysTick_Config+0x40>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da6:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <SysTick_Config+0x40>)
 8001da8:	2207      	movs	r2, #7
 8001daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	e000e010 	.word	0xe000e010

08001dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff47 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de4:	f7ff ff5c 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f7ff ff8e 	bl	8001d10 <NVIC_EncodePriority>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff5d 	bl	8001cbc <__NVIC_SetPriority>
}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ffb0 	bl	8001d78 <SysTick_Config>
 8001e18:	4603      	mov	r3, r0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e081      	b.n	8001f38 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d106      	bne.n	8001e4e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f879 	bl	8001f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2224      	movs	r2, #36	; 0x24
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d107      	bne.n	8001e9c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	e006      	b.n	8001eaa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ea8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d104      	bne.n	8001ebc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ece:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ede:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69d9      	ldr	r1, [r3, #28]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1a      	ldr	r2, [r3, #32]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	4611      	mov	r1, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	817b      	strh	r3, [r7, #10]
 8001f66:	460b      	mov	r3, r1
 8001f68:	813b      	strh	r3, [r7, #8]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	f040 80f9 	bne.w	800216e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_I2C_Mem_Write+0x34>
 8001f82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0ed      	b.n	8002170 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_I2C_Mem_Write+0x4e>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e0e6      	b.n	8002170 <HAL_I2C_Mem_Write+0x21c>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001faa:	f7ff fe25 	bl	8001bf8 <HAL_GetTick>
 8001fae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2319      	movs	r3, #25
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fac3 	bl	8002548 <I2C_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0d1      	b.n	8002170 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2221      	movs	r2, #33	; 0x21
 8001fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2240      	movs	r2, #64	; 0x40
 8001fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a3a      	ldr	r2, [r7, #32]
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ff4:	88f8      	ldrh	r0, [r7, #6]
 8001ff6:	893a      	ldrh	r2, [r7, #8]
 8001ff8:	8979      	ldrh	r1, [r7, #10]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	4603      	mov	r3, r0
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f9d3 	bl	80023b0 <I2C_RequestMemoryWrite>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0a9      	b.n	8002170 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	2bff      	cmp	r3, #255	; 0xff
 8002024:	d90e      	bls.n	8002044 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	22ff      	movs	r2, #255	; 0xff
 800202a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002030:	b2da      	uxtb	r2, r3
 8002032:	8979      	ldrh	r1, [r7, #10]
 8002034:	2300      	movs	r3, #0
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fc3d 	bl	80028bc <I2C_TransferConfig>
 8002042:	e00f      	b.n	8002064 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002052:	b2da      	uxtb	r2, r3
 8002054:	8979      	ldrh	r1, [r7, #10]
 8002056:	2300      	movs	r3, #0
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fc2c 	bl	80028bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fabc 	bl	80025e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e07b      	b.n	8002170 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002092:	b29b      	uxth	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d034      	beq.n	800211c <HAL_I2C_Mem_Write+0x1c8>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d130      	bne.n	800211c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	2200      	movs	r2, #0
 80020c2:	2180      	movs	r1, #128	; 0x80
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fa3f 	bl	8002548 <I2C_WaitOnFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e04d      	b.n	8002170 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2bff      	cmp	r3, #255	; 0xff
 80020dc:	d90e      	bls.n	80020fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	22ff      	movs	r2, #255	; 0xff
 80020e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	8979      	ldrh	r1, [r7, #10]
 80020ec:	2300      	movs	r3, #0
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fbe1 	bl	80028bc <I2C_TransferConfig>
 80020fa:	e00f      	b.n	800211c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210a:	b2da      	uxtb	r2, r3
 800210c:	8979      	ldrh	r1, [r7, #10]
 800210e:	2300      	movs	r3, #0
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fbd0 	bl	80028bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d19e      	bne.n	8002064 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 faa2 	bl	8002674 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e01a      	b.n	8002170 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2220      	movs	r2, #32
 8002140:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_I2C_Mem_Write+0x224>)
 800214e:	400b      	ands	r3, r1
 8002150:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	e000      	b.n	8002170 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800216e:	2302      	movs	r3, #2
  }
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	fe00e800 	.word	0xfe00e800

0800217c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af02      	add	r7, sp, #8
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	4608      	mov	r0, r1
 8002186:	4611      	mov	r1, r2
 8002188:	461a      	mov	r2, r3
 800218a:	4603      	mov	r3, r0
 800218c:	817b      	strh	r3, [r7, #10]
 800218e:	460b      	mov	r3, r1
 8002190:	813b      	strh	r3, [r7, #8]
 8002192:	4613      	mov	r3, r2
 8002194:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b20      	cmp	r3, #32
 80021a0:	f040 80fd 	bne.w	800239e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_I2C_Mem_Read+0x34>
 80021aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0f1      	b.n	80023a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_I2C_Mem_Read+0x4e>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e0ea      	b.n	80023a0 <HAL_I2C_Mem_Read+0x224>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021d2:	f7ff fd11 	bl	8001bf8 <HAL_GetTick>
 80021d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2319      	movs	r3, #25
 80021de:	2201      	movs	r2, #1
 80021e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f9af 	bl	8002548 <I2C_WaitOnFlagUntilTimeout>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0d5      	b.n	80023a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2222      	movs	r2, #34	; 0x22
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002214:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800221c:	88f8      	ldrh	r0, [r7, #6]
 800221e:	893a      	ldrh	r2, [r7, #8]
 8002220:	8979      	ldrh	r1, [r7, #10]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	4603      	mov	r3, r0
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f913 	bl	8002458 <I2C_RequestMemoryRead>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0ad      	b.n	80023a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	2bff      	cmp	r3, #255	; 0xff
 800224c:	d90e      	bls.n	800226c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	22ff      	movs	r2, #255	; 0xff
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	b2da      	uxtb	r2, r3
 800225a:	8979      	ldrh	r1, [r7, #10]
 800225c:	4b52      	ldr	r3, [pc, #328]	; (80023a8 <HAL_I2C_Mem_Read+0x22c>)
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fb29 	bl	80028bc <I2C_TransferConfig>
 800226a:	e00f      	b.n	800228c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	b2da      	uxtb	r2, r3
 800227c:	8979      	ldrh	r1, [r7, #10]
 800227e:	4b4a      	ldr	r3, [pc, #296]	; (80023a8 <HAL_I2C_Mem_Read+0x22c>)
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fb18 	bl	80028bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002292:	2200      	movs	r2, #0
 8002294:	2104      	movs	r1, #4
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f956 	bl	8002548 <I2C_WaitOnFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e07c      	b.n	80023a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d034      	beq.n	800234c <HAL_I2C_Mem_Read+0x1d0>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d130      	bne.n	800234c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	2200      	movs	r2, #0
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f927 	bl	8002548 <I2C_WaitOnFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e04d      	b.n	80023a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	2bff      	cmp	r3, #255	; 0xff
 800230c:	d90e      	bls.n	800232c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	22ff      	movs	r2, #255	; 0xff
 8002312:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002318:	b2da      	uxtb	r2, r3
 800231a:	8979      	ldrh	r1, [r7, #10]
 800231c:	2300      	movs	r3, #0
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fac9 	bl	80028bc <I2C_TransferConfig>
 800232a:	e00f      	b.n	800234c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	b2da      	uxtb	r2, r3
 800233c:	8979      	ldrh	r1, [r7, #10]
 800233e:	2300      	movs	r3, #0
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 fab8 	bl	80028bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d19a      	bne.n	800228c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f98a 	bl	8002674 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e01a      	b.n	80023a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2220      	movs	r2, #32
 8002370:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_I2C_Mem_Read+0x230>)
 800237e:	400b      	ands	r3, r1
 8002380:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
  }
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	80002400 	.word	0x80002400
 80023ac:	fe00e800 	.word	0xfe00e800

080023b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	4608      	mov	r0, r1
 80023ba:	4611      	mov	r1, r2
 80023bc:	461a      	mov	r2, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	817b      	strh	r3, [r7, #10]
 80023c2:	460b      	mov	r3, r1
 80023c4:	813b      	strh	r3, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	8979      	ldrh	r1, [r7, #10]
 80023d0:	4b20      	ldr	r3, [pc, #128]	; (8002454 <I2C_RequestMemoryWrite+0xa4>)
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fa6f 	bl	80028bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	69b9      	ldr	r1, [r7, #24]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f8ff 	bl	80025e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e02c      	b.n	800244c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d105      	bne.n	8002404 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023f8:	893b      	ldrh	r3, [r7, #8]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	629a      	str	r2, [r3, #40]	; 0x28
 8002402:	e015      	b.n	8002430 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002404:	893b      	ldrh	r3, [r7, #8]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	b29b      	uxth	r3, r3
 800240a:	b2da      	uxtb	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	69b9      	ldr	r1, [r7, #24]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f8e5 	bl	80025e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e012      	b.n	800244c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002426:	893b      	ldrh	r3, [r7, #8]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2200      	movs	r2, #0
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f884 	bl	8002548 <I2C_WaitOnFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	80002000 	.word	0x80002000

08002458 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	4608      	mov	r0, r1
 8002462:	4611      	mov	r1, r2
 8002464:	461a      	mov	r2, r3
 8002466:	4603      	mov	r3, r0
 8002468:	817b      	strh	r3, [r7, #10]
 800246a:	460b      	mov	r3, r1
 800246c:	813b      	strh	r3, [r7, #8]
 800246e:	4613      	mov	r3, r2
 8002470:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	8979      	ldrh	r1, [r7, #10]
 8002478:	4b20      	ldr	r3, [pc, #128]	; (80024fc <I2C_RequestMemoryRead+0xa4>)
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2300      	movs	r3, #0
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fa1c 	bl	80028bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	69b9      	ldr	r1, [r7, #24]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f8ac 	bl	80025e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e02c      	b.n	80024f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d105      	bne.n	80024aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800249e:	893b      	ldrh	r3, [r7, #8]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
 80024a8:	e015      	b.n	80024d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024aa:	893b      	ldrh	r3, [r7, #8]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f892 	bl	80025e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e012      	b.n	80024f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024cc:	893b      	ldrh	r3, [r7, #8]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2200      	movs	r2, #0
 80024de:	2140      	movs	r1, #64	; 0x40
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f831 	bl	8002548 <I2C_WaitOnFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	80002000 	.word	0x80002000

08002500 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b02      	cmp	r3, #2
 8002514:	d103      	bne.n	800251e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2200      	movs	r2, #0
 800251c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d007      	beq.n	800253c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	619a      	str	r2, [r3, #24]
  }
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002558:	e031      	b.n	80025be <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002560:	d02d      	beq.n	80025be <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002562:	f7ff fb49 	bl	8001bf8 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d302      	bcc.n	8002578 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d122      	bne.n	80025be <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4013      	ands	r3, r2
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	429a      	cmp	r2, r3
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	429a      	cmp	r2, r3
 8002594:	d113      	bne.n	80025be <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	f043 0220 	orr.w	r2, r3, #32
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4013      	ands	r3, r2
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d0be      	beq.n	800255a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025f2:	e033      	b.n	800265c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f87f 	bl	80026fc <I2C_IsErrorOccurred>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e031      	b.n	800266c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800260e:	d025      	beq.n	800265c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002610:	f7ff faf2 	bl	8001bf8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	429a      	cmp	r2, r3
 800261e:	d302      	bcc.n	8002626 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d11a      	bne.n	800265c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b02      	cmp	r3, #2
 8002632:	d013      	beq.n	800265c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e007      	b.n	800266c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d1c4      	bne.n	80025f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002680:	e02f      	b.n	80026e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f838 	bl	80026fc <I2C_IsErrorOccurred>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e02d      	b.n	80026f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002696:	f7ff faaf 	bl	8001bf8 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d302      	bcc.n	80026ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d11a      	bne.n	80026e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d013      	beq.n	80026e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f043 0220 	orr.w	r2, r3, #32
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e007      	b.n	80026f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d1c8      	bne.n	8002682 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	d068      	beq.n	80027fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2210      	movs	r2, #16
 800272e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002730:	e049      	b.n	80027c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002738:	d045      	beq.n	80027c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7ff fa5d 	bl	8001bf8 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <I2C_IsErrorOccurred+0x54>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d13a      	bne.n	80027c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002762:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800276e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002772:	d121      	bne.n	80027b8 <I2C_IsErrorOccurred+0xbc>
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800277a:	d01d      	beq.n	80027b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	2b20      	cmp	r3, #32
 8002780:	d01a      	beq.n	80027b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002790:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002792:	f7ff fa31 	bl	8001bf8 <HAL_GetTick>
 8002796:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002798:	e00e      	b.n	80027b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800279a:	f7ff fa2d 	bl	8001bf8 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b19      	cmp	r3, #25
 80027a6:	d907      	bls.n	80027b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f043 0320 	orr.w	r3, r3, #32
 80027ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80027b6:	e006      	b.n	80027c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d1e9      	bne.n	800279a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d003      	beq.n	80027dc <I2C_IsErrorOccurred+0xe0>
 80027d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0aa      	beq.n	8002732 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d103      	bne.n	80027ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2220      	movs	r2, #32
 80027ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800281c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	f043 0308 	orr.w	r3, r3, #8
 8002834:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800283e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00b      	beq.n	8002868 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	f043 0302 	orr.w	r3, r3, #2
 8002856:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002860:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01c      	beq.n	80028aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f7ff fe45 	bl	8002500 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <I2C_IsErrorOccurred+0x1bc>)
 8002882:	400b      	ands	r3, r1
 8002884:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	431a      	orrs	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80028aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3728      	adds	r7, #40	; 0x28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	fe00e800 	.word	0xfe00e800

080028bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	817b      	strh	r3, [r7, #10]
 80028ca:	4613      	mov	r3, r2
 80028cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ce:	897b      	ldrh	r3, [r7, #10]
 80028d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028d4:	7a7b      	ldrb	r3, [r7, #9]
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	0d5b      	lsrs	r3, r3, #21
 80028f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <I2C_TransferConfig+0x60>)
 80028fc:	430b      	orrs	r3, r1
 80028fe:	43db      	mvns	r3, r3
 8002900:	ea02 0103 	and.w	r1, r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800290e:	bf00      	nop
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	03ff63ff 	.word	0x03ff63ff

08002920 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b20      	cmp	r3, #32
 8002934:	d138      	bne.n	80029a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002940:	2302      	movs	r3, #2
 8002942:	e032      	b.n	80029aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	; 0x24
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002972:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6819      	ldr	r1, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e000      	b.n	80029aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029a8:	2302      	movs	r3, #2
  }
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d139      	bne.n	8002a40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e033      	b.n	8002a42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2224      	movs	r2, #36	; 0x24
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a60:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d102      	bne.n	8002a76 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	f001 b823 	b.w	8003abc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 817d 	beq.w	8002d86 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a8c:	4bbc      	ldr	r3, [pc, #752]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d00c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a98:	4bb9      	ldr	r3, [pc, #740]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d15c      	bne.n	8002b5e <HAL_RCC_OscConfig+0x10e>
 8002aa4:	4bb6      	ldr	r3, [pc, #728]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab0:	d155      	bne.n	8002b5e <HAL_RCC_OscConfig+0x10e>
 8002ab2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ac6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d102      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x94>
 8002ade:	4ba8      	ldr	r3, [pc, #672]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	e015      	b.n	8002b10 <HAL_RCC_OscConfig+0xc0>
 8002ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ae8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002af8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002afc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b00:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002b0c:	4b9c      	ldr	r3, [pc, #624]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b14:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002b18:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b1c:	fa92 f2a2 	rbit	r2, r2
 8002b20:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002b24:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002b28:	fab2 f282 	clz	r2, r2
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	f042 0220 	orr.w	r2, r2, #32
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	f002 021f 	and.w	r2, r2, #31
 8002b38:	2101      	movs	r1, #1
 8002b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 811f 	beq.w	8002d84 <HAL_RCC_OscConfig+0x334>
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 8116 	bne.w	8002d84 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f000 bfaf 	b.w	8003abc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x12e>
 8002b70:	4b83      	ldr	r3, [pc, #524]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a82      	ldr	r2, [pc, #520]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	e036      	b.n	8002bec <HAL_RCC_OscConfig+0x19c>
 8002b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x158>
 8002b8e:	4b7c      	ldr	r3, [pc, #496]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a7b      	ldr	r2, [pc, #492]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b79      	ldr	r3, [pc, #484]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a78      	ldr	r2, [pc, #480]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e021      	b.n	8002bec <HAL_RCC_OscConfig+0x19c>
 8002ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x184>
 8002bba:	4b71      	ldr	r3, [pc, #452]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a70      	ldr	r2, [pc, #448]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b6e      	ldr	r3, [pc, #440]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a6d      	ldr	r2, [pc, #436]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0x19c>
 8002bd4:	4b6a      	ldr	r3, [pc, #424]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a69      	ldr	r2, [pc, #420]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b67      	ldr	r3, [pc, #412]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a66      	ldr	r2, [pc, #408]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bea:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bec:	4b64      	ldr	r3, [pc, #400]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	f023 020f 	bic.w	r2, r3, #15
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	495f      	ldr	r1, [pc, #380]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d059      	beq.n	8002cca <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c16:	f7fe ffef 	bl	8001bf8 <HAL_GetTick>
 8002c1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c20:	f7fe ffea 	bl	8001bf8 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b64      	cmp	r3, #100	; 0x64
 8002c2e:	d902      	bls.n	8002c36 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	f000 bf43 	b.w	8003abc <HAL_RCC_OscConfig+0x106c>
 8002c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c3a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002c4a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d102      	bne.n	8002c68 <HAL_RCC_OscConfig+0x218>
 8002c62:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	e015      	b.n	8002c94 <HAL_RCC_OscConfig+0x244>
 8002c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c6c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c80:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002c84:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002c90:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c98:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c9c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ca0:	fa92 f2a2 	rbit	r2, r2
 8002ca4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ca8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002cac:	fab2 f282 	clz	r2, r2
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	f042 0220 	orr.w	r2, r2, #32
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	f002 021f 	and.w	r2, r2, #31
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ab      	beq.n	8002c20 <HAL_RCC_OscConfig+0x1d0>
 8002cc8:	e05d      	b.n	8002d86 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fe ff95 	bl	8001bf8 <HAL_GetTick>
 8002cce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fe ff90 	bl	8001bf8 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b64      	cmp	r3, #100	; 0x64
 8002ce2:	d902      	bls.n	8002cea <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	f000 bee9 	b.w	8003abc <HAL_RCC_OscConfig+0x106c>
 8002cea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cee:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002cfe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d102      	bne.n	8002d1c <HAL_RCC_OscConfig+0x2cc>
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	e015      	b.n	8002d48 <HAL_RCC_OscConfig+0x2f8>
 8002d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d20:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d34:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d38:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <HAL_RCC_OscConfig+0x330>)
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d4c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002d50:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d54:	fa92 f2a2 	rbit	r2, r2
 8002d58:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002d5c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d60:	fab2 f282 	clz	r2, r2
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	f042 0220 	orr.w	r2, r2, #32
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	f002 021f 	and.w	r2, r2, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f202 	lsl.w	r2, r1, r2
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ab      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x284>
 8002d7c:	e003      	b.n	8002d86 <HAL_RCC_OscConfig+0x336>
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 817d 	beq.w	8003096 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d9c:	4ba6      	ldr	r3, [pc, #664]	; (8003038 <HAL_RCC_OscConfig+0x5e8>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00b      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002da8:	4ba3      	ldr	r3, [pc, #652]	; (8003038 <HAL_RCC_OscConfig+0x5e8>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d172      	bne.n	8002e9a <HAL_RCC_OscConfig+0x44a>
 8002db4:	4ba0      	ldr	r3, [pc, #640]	; (8003038 <HAL_RCC_OscConfig+0x5e8>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d16c      	bne.n	8002e9a <HAL_RCC_OscConfig+0x44a>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002dd2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <HAL_RCC_OscConfig+0x3a0>
 8002dea:	4b93      	ldr	r3, [pc, #588]	; (8003038 <HAL_RCC_OscConfig+0x5e8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	e013      	b.n	8002e18 <HAL_RCC_OscConfig+0x3c8>
 8002df0:	2302      	movs	r3, #2
 8002df2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e02:	2302      	movs	r3, #2
 8002e04:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e08:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002e14:	4b88      	ldr	r3, [pc, #544]	; (8003038 <HAL_RCC_OscConfig+0x5e8>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	2202      	movs	r2, #2
 8002e1a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002e1e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e22:	fa92 f2a2 	rbit	r2, r2
 8002e26:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002e2a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002e2e:	fab2 f282 	clz	r2, r2
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	f042 0220 	orr.w	r2, r2, #32
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	f002 021f 	and.w	r2, r2, #31
 8002e3e:	2101      	movs	r1, #1
 8002e40:	fa01 f202 	lsl.w	r2, r1, r2
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCC_OscConfig+0x410>
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d002      	beq.n	8002e60 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f000 be2e 	b.w	8003abc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	4b75      	ldr	r3, [pc, #468]	; (8003038 <HAL_RCC_OscConfig+0x5e8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	21f8      	movs	r1, #248	; 0xf8
 8002e76:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e7e:	fa91 f1a1 	rbit	r1, r1
 8002e82:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002e86:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002e8a:	fab1 f181 	clz	r1, r1
 8002e8e:	b2c9      	uxtb	r1, r1
 8002e90:	408b      	lsls	r3, r1
 8002e92:	4969      	ldr	r1, [pc, #420]	; (8003038 <HAL_RCC_OscConfig+0x5e8>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e98:	e0fd      	b.n	8003096 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8088 	beq.w	8002fbc <HAL_RCC_OscConfig+0x56c>
 8002eac:	2301      	movs	r3, #1
 8002eae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002ebe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ecc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fe8e 	bl	8001bf8 <HAL_GetTick>
 8002edc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee2:	f7fe fe89 	bl	8001bf8 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d902      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	f000 bde2 	b.w	8003abc <HAL_RCC_OscConfig+0x106c>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d102      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4d8>
 8002f22:	4b45      	ldr	r3, [pc, #276]	; (8003038 <HAL_RCC_OscConfig+0x5e8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	e013      	b.n	8002f50 <HAL_RCC_OscConfig+0x500>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f40:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f4c:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <HAL_RCC_OscConfig+0x5e8>)
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	2202      	movs	r2, #2
 8002f52:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f56:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f5a:	fa92 f2a2 	rbit	r2, r2
 8002f5e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002f62:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f66:	fab2 f282 	clz	r2, r2
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f042 0220 	orr.w	r2, r2, #32
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f002 021f 	and.w	r2, r2, #31
 8002f76:	2101      	movs	r1, #1
 8002f78:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0af      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f82:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <HAL_RCC_OscConfig+0x5e8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	21f8      	movs	r1, #248	; 0xf8
 8002f98:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002fa0:	fa91 f1a1 	rbit	r1, r1
 8002fa4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002fa8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002fac:	fab1 f181 	clz	r1, r1
 8002fb0:	b2c9      	uxtb	r1, r1
 8002fb2:	408b      	lsls	r3, r1
 8002fb4:	4920      	ldr	r1, [pc, #128]	; (8003038 <HAL_RCC_OscConfig+0x5e8>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
 8002fba:	e06c      	b.n	8003096 <HAL_RCC_OscConfig+0x646>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002fce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fe06 	bl	8001bf8 <HAL_GetTick>
 8002fec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff2:	f7fe fe01 	bl	8001bf8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d902      	bls.n	8003008 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	f000 bd5a 	b.w	8003abc <HAL_RCC_OscConfig+0x106c>
 8003008:	2302      	movs	r3, #2
 800300a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800301a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d104      	bne.n	800303c <HAL_RCC_OscConfig+0x5ec>
 8003032:	4b01      	ldr	r3, [pc, #4]	; (8003038 <HAL_RCC_OscConfig+0x5e8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	e015      	b.n	8003064 <HAL_RCC_OscConfig+0x614>
 8003038:	40021000 	.word	0x40021000
 800303c:	2302      	movs	r3, #2
 800303e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800304e:	2302      	movs	r3, #2
 8003050:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003054:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003058:	fa93 f3a3 	rbit	r3, r3
 800305c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003060:	4bc8      	ldr	r3, [pc, #800]	; (8003384 <HAL_RCC_OscConfig+0x934>)
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	2202      	movs	r2, #2
 8003066:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800306a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800306e:	fa92 f2a2 	rbit	r2, r2
 8003072:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003076:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800307a:	fab2 f282 	clz	r2, r2
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	f042 0220 	orr.w	r2, r2, #32
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	f002 021f 	and.w	r2, r2, #31
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f202 	lsl.w	r2, r1, r2
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1ad      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8110 	beq.w	80032cc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d079      	beq.n	80031b0 <HAL_RCC_OscConfig+0x760>
 80030bc:	2301      	movs	r3, #1
 80030be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80030ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	4bab      	ldr	r3, [pc, #684]	; (8003388 <HAL_RCC_OscConfig+0x938>)
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	461a      	mov	r2, r3
 80030e2:	2301      	movs	r3, #1
 80030e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7fe fd87 	bl	8001bf8 <HAL_GetTick>
 80030ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f0:	f7fe fd82 	bl	8001bf8 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d902      	bls.n	8003106 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	f000 bcdb 	b.w	8003abc <HAL_RCC_OscConfig+0x106c>
 8003106:	2302      	movs	r3, #2
 8003108:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003120:	2202      	movs	r2, #2
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	fa93 f2a3 	rbit	r2, r3
 8003132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003144:	2202      	movs	r2, #2
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	fa93 f2a3 	rbit	r2, r3
 8003156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800315e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003160:	4b88      	ldr	r3, [pc, #544]	; (8003384 <HAL_RCC_OscConfig+0x934>)
 8003162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800316c:	2102      	movs	r1, #2
 800316e:	6019      	str	r1, [r3, #0]
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	fa93 f1a3 	rbit	r1, r3
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003186:	6019      	str	r1, [r3, #0]
  return result;
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	2101      	movs	r1, #1
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0a0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x6a0>
 80031ae:	e08d      	b.n	80032cc <HAL_RCC_OscConfig+0x87c>
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031b8:	2201      	movs	r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	fa93 f2a3 	rbit	r2, r3
 80031ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031d2:	601a      	str	r2, [r3, #0]
  return result;
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031dc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	4b68      	ldr	r3, [pc, #416]	; (8003388 <HAL_RCC_OscConfig+0x938>)
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	461a      	mov	r2, r3
 80031ee:	2300      	movs	r3, #0
 80031f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f2:	f7fe fd01 	bl	8001bf8 <HAL_GetTick>
 80031f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031fc:	f7fe fcfc 	bl	8001bf8 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d902      	bls.n	8003212 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	f000 bc55 	b.w	8003abc <HAL_RCC_OscConfig+0x106c>
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800321a:	2202      	movs	r2, #2
 800321c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003222:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	fa93 f2a3 	rbit	r2, r3
 800322c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003230:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800323e:	2202      	movs	r2, #2
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003262:	2202      	movs	r2, #2
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800327c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327e:	4b41      	ldr	r3, [pc, #260]	; (8003384 <HAL_RCC_OscConfig+0x934>)
 8003280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003286:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800328a:	2102      	movs	r1, #2
 800328c:	6019      	str	r1, [r3, #0]
 800328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003292:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	fa93 f1a3 	rbit	r1, r3
 800329c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032a4:	6019      	str	r1, [r3, #0]
  return result;
 80032a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032aa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	2101      	movs	r1, #1
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d197      	bne.n	80031fc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 81a1 	beq.w	8003624 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e8:	4b26      	ldr	r3, [pc, #152]	; (8003384 <HAL_RCC_OscConfig+0x934>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d116      	bne.n	8003322 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f4:	4b23      	ldr	r3, [pc, #140]	; (8003384 <HAL_RCC_OscConfig+0x934>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	4a22      	ldr	r2, [pc, #136]	; (8003384 <HAL_RCC_OscConfig+0x934>)
 80032fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fe:	61d3      	str	r3, [r2, #28]
 8003300:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_RCC_OscConfig+0x934>)
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003316:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800331a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_RCC_OscConfig+0x93c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11a      	bne.n	8003364 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332e:	4b17      	ldr	r3, [pc, #92]	; (800338c <HAL_RCC_OscConfig+0x93c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a16      	ldr	r2, [pc, #88]	; (800338c <HAL_RCC_OscConfig+0x93c>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333a:	f7fe fc5d 	bl	8001bf8 <HAL_GetTick>
 800333e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003342:	e009      	b.n	8003358 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003344:	f7fe fc58 	bl	8001bf8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b64      	cmp	r3, #100	; 0x64
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e3b1      	b.n	8003abc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_RCC_OscConfig+0x93c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ef      	beq.n	8003344 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d10d      	bne.n	8003390 <HAL_RCC_OscConfig+0x940>
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HAL_RCC_OscConfig+0x934>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4a02      	ldr	r2, [pc, #8]	; (8003384 <HAL_RCC_OscConfig+0x934>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6213      	str	r3, [r2, #32]
 8003380:	e03c      	b.n	80033fc <HAL_RCC_OscConfig+0x9ac>
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
 8003388:	10908120 	.word	0x10908120
 800338c:	40007000 	.word	0x40007000
 8003390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003394:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10c      	bne.n	80033ba <HAL_RCC_OscConfig+0x96a>
 80033a0:	4bc1      	ldr	r3, [pc, #772]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4ac0      	ldr	r2, [pc, #768]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	6213      	str	r3, [r2, #32]
 80033ac:	4bbe      	ldr	r3, [pc, #760]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4abd      	ldr	r2, [pc, #756]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80033b2:	f023 0304 	bic.w	r3, r3, #4
 80033b6:	6213      	str	r3, [r2, #32]
 80033b8:	e020      	b.n	80033fc <HAL_RCC_OscConfig+0x9ac>
 80033ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2b05      	cmp	r3, #5
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x994>
 80033ca:	4bb7      	ldr	r3, [pc, #732]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	4ab6      	ldr	r2, [pc, #728]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80033d0:	f043 0304 	orr.w	r3, r3, #4
 80033d4:	6213      	str	r3, [r2, #32]
 80033d6:	4bb4      	ldr	r3, [pc, #720]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	4ab3      	ldr	r2, [pc, #716]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6213      	str	r3, [r2, #32]
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0x9ac>
 80033e4:	4bb0      	ldr	r3, [pc, #704]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4aaf      	ldr	r2, [pc, #700]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	6213      	str	r3, [r2, #32]
 80033f0:	4bad      	ldr	r3, [pc, #692]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4aac      	ldr	r2, [pc, #688]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80033f6:	f023 0304 	bic.w	r3, r3, #4
 80033fa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8081 	beq.w	8003510 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340e:	f7fe fbf3 	bl	8001bf8 <HAL_GetTick>
 8003412:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003418:	f7fe fbee 	bl	8001bf8 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e345      	b.n	8003abc <HAL_RCC_OscConfig+0x106c>
 8003430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003434:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003438:	2202      	movs	r2, #2
 800343a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003440:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	fa93 f2a3 	rbit	r2, r3
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800345c:	2202      	movs	r2, #2
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003464:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	fa93 f2a3 	rbit	r2, r3
 800346e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003472:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003476:	601a      	str	r2, [r3, #0]
  return result;
 8003478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003480:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f043 0302 	orr.w	r3, r3, #2
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d102      	bne.n	800349c <HAL_RCC_OscConfig+0xa4c>
 8003496:	4b84      	ldr	r3, [pc, #528]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	e013      	b.n	80034c4 <HAL_RCC_OscConfig+0xa74>
 800349c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034a4:	2202      	movs	r2, #2
 80034a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	fa93 f2a3 	rbit	r2, r3
 80034b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	4b79      	ldr	r3, [pc, #484]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80034cc:	2102      	movs	r1, #2
 80034ce:	6011      	str	r1, [r2, #0]
 80034d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034d4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	fa92 f1a2 	rbit	r1, r2
 80034de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034e2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80034e6:	6011      	str	r1, [r2, #0]
  return result;
 80034e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ec:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	fab2 f282 	clz	r2, r2
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	f002 021f 	and.w	r2, r2, #31
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f202 	lsl.w	r2, r1, r2
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d084      	beq.n	8003418 <HAL_RCC_OscConfig+0x9c8>
 800350e:	e07f      	b.n	8003610 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003510:	f7fe fb72 	bl	8001bf8 <HAL_GetTick>
 8003514:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003518:	e00b      	b.n	8003532 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe fb6d 	bl	8001bf8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e2c4      	b.n	8003abc <HAL_RCC_OscConfig+0x106c>
 8003532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003536:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800353a:	2202      	movs	r2, #2
 800353c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003542:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	fa93 f2a3 	rbit	r2, r3
 800354c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003550:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800355e:	2202      	movs	r2, #2
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003566:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	fa93 f2a3 	rbit	r2, r3
 8003570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003574:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003578:	601a      	str	r2, [r3, #0]
  return result;
 800357a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003582:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f043 0302 	orr.w	r3, r3, #2
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d102      	bne.n	800359e <HAL_RCC_OscConfig+0xb4e>
 8003598:	4b43      	ldr	r3, [pc, #268]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	e013      	b.n	80035c6 <HAL_RCC_OscConfig+0xb76>
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035a6:	2202      	movs	r2, #2
 80035a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	fa93 f2a3 	rbit	r2, r3
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80035ce:	2102      	movs	r1, #2
 80035d0:	6011      	str	r1, [r2, #0]
 80035d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	fa92 f1a2 	rbit	r1, r2
 80035e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035e4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80035e8:	6011      	str	r1, [r2, #0]
  return result;
 80035ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ee:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	fab2 f282 	clz	r2, r2
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	f002 021f 	and.w	r2, r2, #31
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f202 	lsl.w	r2, r1, r2
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d184      	bne.n	800351a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003610:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003614:	2b01      	cmp	r3, #1
 8003616:	d105      	bne.n	8003624 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003618:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	4a22      	ldr	r2, [pc, #136]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 800361e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003622:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8242 	beq.w	8003aba <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003636:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <HAL_RCC_OscConfig+0xc58>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b08      	cmp	r3, #8
 8003640:	f000 8213 	beq.w	8003a6a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003648:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	2b02      	cmp	r3, #2
 8003652:	f040 8162 	bne.w	800391a <HAL_RCC_OscConfig+0xeca>
 8003656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800365e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003668:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	fa93 f2a3 	rbit	r2, r3
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800367a:	601a      	str	r2, [r3, #0]
  return result;
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003684:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003690:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	461a      	mov	r2, r3
 8003698:	2300      	movs	r3, #0
 800369a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fe faac 	bl	8001bf8 <HAL_GetTick>
 80036a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a4:	e00c      	b.n	80036c0 <HAL_RCC_OscConfig+0xc70>
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fe faa4 	bl	8001bf8 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e1fd      	b.n	8003abc <HAL_RCC_OscConfig+0x106c>
 80036c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	fa93 f2a3 	rbit	r2, r3
 80036dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036e4:	601a      	str	r2, [r3, #0]
  return result;
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d102      	bne.n	800370a <HAL_RCC_OscConfig+0xcba>
 8003704:	4bb0      	ldr	r3, [pc, #704]	; (80039c8 <HAL_RCC_OscConfig+0xf78>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	e027      	b.n	800375a <HAL_RCC_OscConfig+0xd0a>
 800370a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	fa93 f2a3 	rbit	r2, r3
 8003726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003734:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	fa93 f2a3 	rbit	r2, r3
 800374c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003750:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	4b9c      	ldr	r3, [pc, #624]	; (80039c8 <HAL_RCC_OscConfig+0xf78>)
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800375e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003762:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003766:	6011      	str	r1, [r2, #0]
 8003768:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800376c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	fa92 f1a2 	rbit	r1, r2
 8003776:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800377a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800377e:	6011      	str	r1, [r2, #0]
  return result;
 8003780:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003784:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	fab2 f282 	clz	r2, r2
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	f042 0220 	orr.w	r2, r2, #32
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	f002 021f 	and.w	r2, r2, #31
 800379a:	2101      	movs	r1, #1
 800379c:	fa01 f202 	lsl.w	r2, r1, r2
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d182      	bne.n	80036ac <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a6:	4b88      	ldr	r3, [pc, #544]	; (80039c8 <HAL_RCC_OscConfig+0xf78>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	430b      	orrs	r3, r1
 80037c8:	497f      	ldr	r1, [pc, #508]	; (80039c8 <HAL_RCC_OscConfig+0xf78>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	604b      	str	r3, [r1, #4]
 80037ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80037d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	fa93 f2a3 	rbit	r2, r3
 80037ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ee:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80037f2:	601a      	str	r2, [r3, #0]
  return result;
 80037f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80037fc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003808:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	461a      	mov	r2, r3
 8003810:	2301      	movs	r3, #1
 8003812:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fe f9f0 	bl	8001bf8 <HAL_GetTick>
 8003818:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800381c:	e009      	b.n	8003832 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381e:	f7fe f9eb 	bl	8001bf8 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e144      	b.n	8003abc <HAL_RCC_OscConfig+0x106c>
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800383a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800383e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003844:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	fa93 f2a3 	rbit	r2, r3
 800384e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003852:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003856:	601a      	str	r2, [r3, #0]
  return result;
 8003858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003860:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d102      	bne.n	800387c <HAL_RCC_OscConfig+0xe2c>
 8003876:	4b54      	ldr	r3, [pc, #336]	; (80039c8 <HAL_RCC_OscConfig+0xf78>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	e027      	b.n	80038cc <HAL_RCC_OscConfig+0xe7c>
 800387c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003880:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fa93 f2a3 	rbit	r2, r3
 8003898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	fa93 f2a3 	rbit	r2, r3
 80038be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <HAL_RCC_OscConfig+0xf78>)
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038d0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80038d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038d8:	6011      	str	r1, [r2, #0]
 80038da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038de:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	fa92 f1a2 	rbit	r1, r2
 80038e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038ec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80038f0:	6011      	str	r1, [r2, #0]
  return result;
 80038f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038f6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	fab2 f282 	clz	r2, r2
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	f042 0220 	orr.w	r2, r2, #32
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	f002 021f 	and.w	r2, r2, #31
 800390c:	2101      	movs	r1, #1
 800390e:	fa01 f202 	lsl.w	r2, r1, r2
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d082      	beq.n	800381e <HAL_RCC_OscConfig+0xdce>
 8003918:	e0cf      	b.n	8003aba <HAL_RCC_OscConfig+0x106a>
 800391a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003922:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	fa93 f2a3 	rbit	r2, r3
 8003936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800393e:	601a      	str	r2, [r3, #0]
  return result;
 8003940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003944:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003948:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394a:	fab3 f383 	clz	r3, r3
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003954:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	461a      	mov	r2, r3
 800395c:	2300      	movs	r3, #0
 800395e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fe f94a 	bl	8001bf8 <HAL_GetTick>
 8003964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003968:	e009      	b.n	800397e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396a:	f7fe f945 	bl	8001bf8 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e09e      	b.n	8003abc <HAL_RCC_OscConfig+0x106c>
 800397e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003982:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800398a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003990:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	fa93 f2a3 	rbit	r2, r3
 800399a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039a2:	601a      	str	r2, [r3, #0]
  return result;
 80039a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d104      	bne.n	80039cc <HAL_RCC_OscConfig+0xf7c>
 80039c2:	4b01      	ldr	r3, [pc, #4]	; (80039c8 <HAL_RCC_OscConfig+0xf78>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	e029      	b.n	8003a1c <HAL_RCC_OscConfig+0xfcc>
 80039c8:	40021000 	.word	0x40021000
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	fa93 f2a3 	rbit	r2, r3
 80039e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80039fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a04:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	fa93 f2a3 	rbit	r2, r3
 8003a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a12:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <HAL_RCC_OscConfig+0x1078>)
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a20:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a28:	6011      	str	r1, [r2, #0]
 8003a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a2e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	fa92 f1a2 	rbit	r1, r2
 8003a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a3c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a40:	6011      	str	r1, [r2, #0]
  return result;
 8003a42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a46:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	fab2 f282 	clz	r2, r2
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	f042 0220 	orr.w	r2, r2, #32
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	f002 021f 	and.w	r2, r2, #31
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d180      	bne.n	800396a <HAL_RCC_OscConfig+0xf1a>
 8003a68:	e027      	b.n	8003aba <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e01e      	b.n	8003abc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <HAL_RCC_OscConfig+0x1078>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a8a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d10b      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003aa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000

08003acc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b09e      	sub	sp, #120	; 0x78
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e162      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b90      	ldr	r3, [pc, #576]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d910      	bls.n	8003b14 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b8d      	ldr	r3, [pc, #564]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 0207 	bic.w	r2, r3, #7
 8003afa:	498b      	ldr	r1, [pc, #556]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b89      	ldr	r3, [pc, #548]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e14a      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b20:	4b82      	ldr	r3, [pc, #520]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	497f      	ldr	r1, [pc, #508]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80dc 	beq.w	8003cf8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d13c      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xf6>
 8003b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b50:	fa93 f3a3 	rbit	r3, r3
 8003b54:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d102      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xa6>
 8003b6c:	4b6f      	ldr	r3, [pc, #444]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	e00f      	b.n	8003b92 <HAL_RCC_ClockConfig+0xc6>
 8003b72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	667b      	str	r3, [r7, #100]	; 0x64
 8003b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b84:	663b      	str	r3, [r7, #96]	; 0x60
 8003b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b88:	fa93 f3a3 	rbit	r3, r3
 8003b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b8e:	4b67      	ldr	r3, [pc, #412]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b96:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b9a:	fa92 f2a2 	rbit	r2, r2
 8003b9e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ba0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ba2:	fab2 f282 	clz	r2, r2
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	f042 0220 	orr.w	r2, r2, #32
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	f002 021f 	and.w	r2, r2, #31
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d17b      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0f3      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d13c      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x178>
 8003bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd2:	fa93 f3a3 	rbit	r3, r3
 8003bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bda:	fab3 f383 	clz	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d102      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x128>
 8003bee:	4b4f      	ldr	r3, [pc, #316]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	e00f      	b.n	8003c14 <HAL_RCC_ClockConfig+0x148>
 8003bf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfc:	fa93 f3a3 	rbit	r3, r3
 8003c00:	647b      	str	r3, [r7, #68]	; 0x44
 8003c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c06:	643b      	str	r3, [r7, #64]	; 0x40
 8003c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c10:	4b46      	ldr	r3, [pc, #280]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c18:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c1c:	fa92 f2a2 	rbit	r2, r2
 8003c20:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c24:	fab2 f282 	clz	r2, r2
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	f042 0220 	orr.w	r2, r2, #32
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	f002 021f 	and.w	r2, r2, #31
 8003c34:	2101      	movs	r1, #1
 8003c36:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d13a      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0b2      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
 8003c44:	2302      	movs	r3, #2
 8003c46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	fa93 f3a3 	rbit	r3, r3
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d102      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x1a0>
 8003c66:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	e00d      	b.n	8003c88 <HAL_RCC_ClockConfig+0x1bc>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
 8003c78:	2302      	movs	r3, #2
 8003c7a:	623b      	str	r3, [r7, #32]
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	2202      	movs	r2, #2
 8003c8a:	61ba      	str	r2, [r7, #24]
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	fa92 f2a2 	rbit	r2, r2
 8003c92:	617a      	str	r2, [r7, #20]
  return result;
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	fab2 f282 	clz	r2, r2
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	f042 0220 	orr.w	r2, r2, #32
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	f002 021f 	and.w	r2, r2, #31
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e079      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	491a      	ldr	r1, [pc, #104]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc8:	f7fd ff96 	bl	8001bf8 <HAL_GetTick>
 8003ccc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd0:	f7fd ff92 	bl	8001bf8 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e061      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 020c 	and.w	r2, r3, #12
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d1eb      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d214      	bcs.n	8003d30 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 0207 	bic.w	r2, r3, #7
 8003d0e:	4906      	ldr	r1, [pc, #24]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e040      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
 8003d28:	40022000 	.word	0x40022000
 8003d2c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	491a      	ldr	r1, [pc, #104]	; (8003db4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4912      	ldr	r1, [pc, #72]	; (8003db4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d6e:	f000 f829 	bl	8003dc4 <HAL_RCC_GetSysClockFreq>
 8003d72:	4601      	mov	r1, r0
 8003d74:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d7c:	22f0      	movs	r2, #240	; 0xf0
 8003d7e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	fa92 f2a2 	rbit	r2, r2
 8003d86:	60fa      	str	r2, [r7, #12]
  return result;
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	fab2 f282 	clz	r2, r2
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	40d3      	lsrs	r3, r2
 8003d92:	4a09      	ldr	r2, [pc, #36]	; (8003db8 <HAL_RCC_ClockConfig+0x2ec>)
 8003d94:	5cd3      	ldrb	r3, [r2, r3]
 8003d96:	fa21 f303 	lsr.w	r3, r1, r3
 8003d9a:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <HAL_RCC_ClockConfig+0x2f0>)
 8003d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d9e:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <HAL_RCC_ClockConfig+0x2f4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fd fee4 	bl	8001b70 <HAL_InitTick>
  
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3778      	adds	r7, #120	; 0x78
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	08004268 	.word	0x08004268
 8003dbc:	20000020 	.word	0x20000020
 8003dc0:	20000024 	.word	0x20000024

08003dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b08b      	sub	sp, #44	; 0x2c
 8003dc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003dde:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d002      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x30>
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d003      	beq.n	8003dfa <HAL_RCC_GetSysClockFreq+0x36>
 8003df2:	e03c      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003df4:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003df6:	623b      	str	r3, [r7, #32]
      break;
 8003df8:	e03c      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e00:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e04:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	fa92 f2a2 	rbit	r2, r2
 8003e0c:	607a      	str	r2, [r7, #4]
  return result;
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	fab2 f282 	clz	r2, r2
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	40d3      	lsrs	r3, r2
 8003e18:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e1a:	5cd3      	ldrb	r3, [r2, r3]
 8003e1c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e1e:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	220f      	movs	r2, #15
 8003e28:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	fa92 f2a2 	rbit	r2, r2
 8003e30:	60fa      	str	r2, [r7, #12]
  return result;
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	fab2 f282 	clz	r2, r2
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	40d3      	lsrs	r3, r2
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e3e:	5cd3      	ldrb	r3, [r2, r3]
 8003e40:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e4c:	4a0e      	ldr	r2, [pc, #56]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5c:	e004      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	4a0c      	ldr	r2, [pc, #48]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	623b      	str	r3, [r7, #32]
      break;
 8003e6c:	e002      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e70:	623b      	str	r3, [r7, #32]
      break;
 8003e72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e74:	6a3b      	ldr	r3, [r7, #32]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	372c      	adds	r7, #44	; 0x2c
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	007a1200 	.word	0x007a1200
 8003e8c:	08004278 	.word	0x08004278
 8003e90:	08004288 	.word	0x08004288
 8003e94:	003d0900 	.word	0x003d0900

08003e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b092      	sub	sp, #72	; 0x48
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80d4 	beq.w	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ebc:	4b4e      	ldr	r3, [pc, #312]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10e      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec8:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	4a4a      	ldr	r2, [pc, #296]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	61d3      	str	r3, [r2, #28]
 8003ed4:	4b48      	ldr	r3, [pc, #288]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee6:	4b45      	ldr	r3, [pc, #276]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d118      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef2:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a41      	ldr	r2, [pc, #260]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efe:	f7fd fe7b 	bl	8001bf8 <HAL_GetTick>
 8003f02:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	e008      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f06:	f7fd fe77 	bl	8001bf8 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b64      	cmp	r3, #100	; 0x64
 8003f12:	d901      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e169      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	4b38      	ldr	r3, [pc, #224]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f24:	4b34      	ldr	r3, [pc, #208]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8084 	beq.w	800403e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d07c      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f44:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	fa93 f3a3 	rbit	r3, r3
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b26      	ldr	r3, [pc, #152]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2301      	movs	r3, #1
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	fa93 f3a3 	rbit	r3, r3
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f82:	fab3 f383 	clz	r3, r3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	461a      	mov	r2, r3
 8003f92:	2300      	movs	r3, #0
 8003f94:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f96:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d04b      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fd fe27 	bl	8001bf8 <HAL_GetTick>
 8003faa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fd fe23 	bl	8001bf8 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e113      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	623b      	str	r3, [r7, #32]
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	61fb      	str	r3, [r7, #28]
  return result;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fde:	fab3 f383 	clz	r3, r3
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f043 0302 	orr.w	r3, r3, #2
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d108      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ff2:	4b01      	ldr	r3, [pc, #4]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	e00d      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40007000 	.word	0x40007000
 8004000:	10908100 	.word	0x10908100
 8004004:	2302      	movs	r3, #2
 8004006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	4b78      	ldr	r3, [pc, #480]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	2202      	movs	r2, #2
 8004016:	613a      	str	r2, [r7, #16]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	fa92 f2a2 	rbit	r2, r2
 800401e:	60fa      	str	r2, [r7, #12]
  return result;
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	fab2 f282 	clz	r2, r2
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f002 021f 	and.w	r2, r2, #31
 8004032:	2101      	movs	r1, #1
 8004034:	fa01 f202 	lsl.w	r2, r1, r2
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0b7      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800403e:	4b6d      	ldr	r3, [pc, #436]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	496a      	ldr	r1, [pc, #424]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800404c:	4313      	orrs	r3, r2
 800404e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004050:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004054:	2b01      	cmp	r3, #1
 8004056:	d105      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004058:	4b66      	ldr	r3, [pc, #408]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	4a65      	ldr	r2, [pc, #404]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800405e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004062:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004070:	4b60      	ldr	r3, [pc, #384]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	f023 0203 	bic.w	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	495d      	ldr	r1, [pc, #372]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800407e:	4313      	orrs	r3, r2
 8004080:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800408e:	4b59      	ldr	r3, [pc, #356]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4956      	ldr	r1, [pc, #344]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800409c:	4313      	orrs	r3, r2
 800409e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ac:	4b51      	ldr	r3, [pc, #324]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	494e      	ldr	r1, [pc, #312]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ca:	4b4a      	ldr	r3, [pc, #296]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	f023 0210 	bic.w	r2, r3, #16
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	4947      	ldr	r1, [pc, #284]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80040e8:	4b42      	ldr	r3, [pc, #264]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	493f      	ldr	r1, [pc, #252]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004106:	4b3b      	ldr	r3, [pc, #236]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f023 0220 	bic.w	r2, r3, #32
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4938      	ldr	r1, [pc, #224]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004114:	4313      	orrs	r3, r2
 8004116:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004124:	4b33      	ldr	r3, [pc, #204]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	4930      	ldr	r1, [pc, #192]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004132:	4313      	orrs	r3, r2
 8004134:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004142:	4b2c      	ldr	r3, [pc, #176]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	4929      	ldr	r1, [pc, #164]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004150:	4313      	orrs	r3, r2
 8004152:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004160:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4921      	ldr	r1, [pc, #132]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	491a      	ldr	r1, [pc, #104]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800418c:	4313      	orrs	r3, r2
 800418e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800419c:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	4912      	ldr	r1, [pc, #72]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041ba:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	490b      	ldr	r1, [pc, #44]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e4:	4903      	ldr	r1, [pc, #12]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3748      	adds	r7, #72	; 0x48
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000

080041f8 <__libc_init_array>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4d0d      	ldr	r5, [pc, #52]	; (8004230 <__libc_init_array+0x38>)
 80041fc:	4c0d      	ldr	r4, [pc, #52]	; (8004234 <__libc_init_array+0x3c>)
 80041fe:	1b64      	subs	r4, r4, r5
 8004200:	10a4      	asrs	r4, r4, #2
 8004202:	2600      	movs	r6, #0
 8004204:	42a6      	cmp	r6, r4
 8004206:	d109      	bne.n	800421c <__libc_init_array+0x24>
 8004208:	4d0b      	ldr	r5, [pc, #44]	; (8004238 <__libc_init_array+0x40>)
 800420a:	4c0c      	ldr	r4, [pc, #48]	; (800423c <__libc_init_array+0x44>)
 800420c:	f000 f820 	bl	8004250 <_init>
 8004210:	1b64      	subs	r4, r4, r5
 8004212:	10a4      	asrs	r4, r4, #2
 8004214:	2600      	movs	r6, #0
 8004216:	42a6      	cmp	r6, r4
 8004218:	d105      	bne.n	8004226 <__libc_init_array+0x2e>
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004220:	4798      	blx	r3
 8004222:	3601      	adds	r6, #1
 8004224:	e7ee      	b.n	8004204 <__libc_init_array+0xc>
 8004226:	f855 3b04 	ldr.w	r3, [r5], #4
 800422a:	4798      	blx	r3
 800422c:	3601      	adds	r6, #1
 800422e:	e7f2      	b.n	8004216 <__libc_init_array+0x1e>
 8004230:	08004298 	.word	0x08004298
 8004234:	08004298 	.word	0x08004298
 8004238:	08004298 	.word	0x08004298
 800423c:	0800429c 	.word	0x0800429c

08004240 <memset>:
 8004240:	4402      	add	r2, r0
 8004242:	4603      	mov	r3, r0
 8004244:	4293      	cmp	r3, r2
 8004246:	d100      	bne.n	800424a <memset+0xa>
 8004248:	4770      	bx	lr
 800424a:	f803 1b01 	strb.w	r1, [r3], #1
 800424e:	e7f9      	b.n	8004244 <memset+0x4>

08004250 <_init>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr

0800425c <_fini>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	bf00      	nop
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr
